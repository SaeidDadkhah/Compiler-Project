/* A Bison parser, made by GNU Bison 2.5.  */

/* Skeleton implementation for Bison LALR(1) parsers in Java
   
      Copyright (C) 2007-2011 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* First part of user declarations.  */

/* Line 32 of lalr1.java  */
/* Line 1 of "SHLang.yac"  */

  package jSHLang;
  
  import java.io.*;
  import java.util.ArrayList;


/**
 * A Bison parser, automatically generated from <tt>SHLang.yac</tt>.
 *
 * @author LALR (1) parser skeleton written by Paolo Bonzini.
 */
class YYParser
{
    /** Version number for the Bison executable that generated this parser.  */
  public static final String bisonVersion = "2.5";

  /** Name of the skeleton that generated this parser.  */
  public static final String bisonSkeleton = "lalr1.java";


  /** True if verbose error messages are enabled.  */
  public boolean errorVerbose = false;



  /** Token returned by the scanner to signal the end of its input.  */
  public static final int EOF = 0;

/* Tokens.  */
  /** Token number, to be returned by the scanner.  */
  public static final int PROGRAM_KW = 258;
  /** Token number, to be returned by the scanner.  */
  public static final int MAIN_KW = 259;
  /** Token number, to be returned by the scanner.  */
  public static final int PROCEDURE_KW = 260;
  /** Token number, to be returned by the scanner.  */
  public static final int INTEGER_KW = 261;
  /** Token number, to be returned by the scanner.  */
  public static final int REAL_KW = 262;
  /** Token number, to be returned by the scanner.  */
  public static final int CHAR_KW = 263;
  /** Token number, to be returned by the scanner.  */
  public static final int BOOLEAN_KW = 264;
  /** Token number, to be returned by the scanner.  */
  public static final int IF_KW = 265;
  /** Token number, to be returned by the scanner.  */
  public static final int THEN_KW = 266;
  /** Token number, to be returned by the scanner.  */
  public static final int ELSE_KW = 267;
  /** Token number, to be returned by the scanner.  */
  public static final int DO_KW = 268;
  /** Token number, to be returned by the scanner.  */
  public static final int WHILE_KW = 269;
  /** Token number, to be returned by the scanner.  */
  public static final int FOR_KW = 270;
  /** Token number, to be returned by the scanner.  */
  public static final int IN_KW = 271;
  /** Token number, to be returned by the scanner.  */
  public static final int REPEAT_KW = 272;
  /** Token number, to be returned by the scanner.  */
  public static final int SWITCH_KW = 273;
  /** Token number, to be returned by the scanner.  */
  public static final int CASE_KW = 274;
  /** Token number, to be returned by the scanner.  */
  public static final int DEFAULT_KW = 275;
  /** Token number, to be returned by the scanner.  */
  public static final int END_KW = 276;
  /** Token number, to be returned by the scanner.  */
  public static final int RETURN_KW = 277;
  /** Token number, to be returned by the scanner.  */
  public static final int EXIT_KW = 278;
  /** Token number, to be returned by the scanner.  */
  public static final int WHEN_KW = 279;
  /** Token number, to be returned by the scanner.  */
  public static final int AND_KW = 280;
  /** Token number, to be returned by the scanner.  */
  public static final int AND_THEN_KW = 281;
  /** Token number, to be returned by the scanner.  */
  public static final int OR_KW = 282;
  /** Token number, to be returned by the scanner.  */
  public static final int OR_ELSE_KW = 283;
  /** Token number, to be returned by the scanner.  */
  public static final int NOT_KW = 284;
  /** Token number, to be returned by the scanner.  */
  public static final int SEMICOLON_KW = 285;
  /** Token number, to be returned by the scanner.  */
  public static final int COLON_KW = 286;
  /** Token number, to be returned by the scanner.  */
  public static final int COMMA_KW = 287;
  /** Token number, to be returned by the scanner.  */
  public static final int ASS_KW = 288;
  /** Token number, to be returned by the scanner.  */
  public static final int LP_KW = 289;
  /** Token number, to be returned by the scanner.  */
  public static final int RP_KW = 290;
  /** Token number, to be returned by the scanner.  */
  public static final int LB_KW = 291;
  /** Token number, to be returned by the scanner.  */
  public static final int RB_KW = 292;
  /** Token number, to be returned by the scanner.  */
  public static final int LCB_KW = 293;
  /** Token number, to be returned by the scanner.  */
  public static final int RCB_KW = 294;
  /** Token number, to be returned by the scanner.  */
  public static final int TWO_DOTS_KW = 295;
  /** Token number, to be returned by the scanner.  */
  public static final int EQ_KW = 296;
  /** Token number, to be returned by the scanner.  */
  public static final int NE_KW = 297;
  /** Token number, to be returned by the scanner.  */
  public static final int LE_KW = 298;
  /** Token number, to be returned by the scanner.  */
  public static final int LT_KW = 299;
  /** Token number, to be returned by the scanner.  */
  public static final int GE_KW = 300;
  /** Token number, to be returned by the scanner.  */
  public static final int GT_KW = 301;
  /** Token number, to be returned by the scanner.  */
  public static final int ADD_KW = 302;
  /** Token number, to be returned by the scanner.  */
  public static final int SUB_KW = 303;
  /** Token number, to be returned by the scanner.  */
  public static final int MUL_KW = 304;
  /** Token number, to be returned by the scanner.  */
  public static final int DIV_KW = 305;
  /** Token number, to be returned by the scanner.  */
  public static final int MOD_KW = 306;
  /** Token number, to be returned by the scanner.  */
  public static final int IDENTIFIER = 307;
  /** Token number, to be returned by the scanner.  */
  public static final int INTEGER_CONSTANT = 308;
  /** Token number, to be returned by the scanner.  */
  public static final int REAL_CONSTANT = 309;
  /** Token number, to be returned by the scanner.  */
  public static final int CHAR_CONSTANT = 310;
  /** Token number, to be returned by the scanner.  */
  public static final int BOOLEAN_CONSTANT = 311;
  /** Token number, to be returned by the scanner.  */
  public static final int usub = 312;



  

  /**
   * Communication interface between the scanner and the Bison-generated
   * parser <tt>YYParser</tt>.
   */
  public interface Lexer {
    

    /**
     * Method to retrieve the semantic value of the last scanned token.
     * @return the semantic value of the last scanned token.  */
    Object getLVal ();

    /**
     * Entry point for the scanner.  Returns the token identifier corresponding
     * to the next token and prepares to return the semantic value
     * of the token.
     * @return the token identifier corresponding to the next token. */
    int yylex () throws java.io.IOException;

    /**
     * Entry point for error reporting.  Emits an error
     * in a user-defined way.
     *
     * 
     * @param s The string for the error message.  */
     void yyerror (String s);
  }

  /** The object doing lexical analysis for us.  */
  private Lexer yylexer;
  
  



  /**
   * Instantiates the Bison-generated parser.
   * @param yylexer The scanner that will supply tokens to the parser.
   */
  public YYParser (Lexer yylexer) {
    this.yylexer = yylexer;
    
  }

  private java.io.PrintStream yyDebugStream = System.err;

  /**
   * Return the <tt>PrintStream</tt> on which the debugging output is
   * printed.
   */
  public final java.io.PrintStream getDebugStream () { return yyDebugStream; }

  /**
   * Set the <tt>PrintStream</tt> on which the debug output is printed.
   * @param s The stream that is used for debugging output.
   */
  public final void setDebugStream(java.io.PrintStream s) { yyDebugStream = s; }

  private int yydebug = 0;

  /**
   * Answer the verbosity of the debugging output; 0 means that all kinds of
   * output from the parser are suppressed.
   */
  public final int getDebugLevel() { return yydebug; }

  /**
   * Set the verbosity of the debugging output; 0 means that all kinds of
   * output from the parser are suppressed.
   * @param level The verbosity level for debugging output.
   */
  public final void setDebugLevel(int level) { yydebug = level; }

  private final int yylex () throws java.io.IOException {
    return yylexer.yylex ();
  }
  protected final void yyerror (String s) {
    yylexer.yyerror (s);
  }

  

  protected final void yycdebug (String s) {
    if (yydebug > 0)
      yyDebugStream.println (s);
  }

  private final class YYStack {
    private int[] stateStack = new int[16];
    
    private Object[] valueStack = new Object[16];

    public int size = 16;
    public int height = -1;

    public final void push (int state, Object value			    ) {
      height++;
      if (size == height)
        {
	  int[] newStateStack = new int[size * 2];
	  System.arraycopy (stateStack, 0, newStateStack, 0, height);
	  stateStack = newStateStack;
	  

	  Object[] newValueStack = new Object[size * 2];
	  System.arraycopy (valueStack, 0, newValueStack, 0, height);
	  valueStack = newValueStack;

	  size *= 2;
	}

      stateStack[height] = state;
      
      valueStack[height] = value;
    }

    public final void pop () {
      pop (1);
    }

    public final void pop (int num) {
      // Avoid memory leaks... garbage collection is a white lie!
      if (num > 0) {
	java.util.Arrays.fill (valueStack, height - num + 1, height + 1, null);
        
      }
      height -= num;
    }

    public final int stateAt (int i) {
      return stateStack[height - i];
    }

    public final Object valueAt (int i) {
      return valueStack[height - i];
    }

    // Print the state stack on the debug stream.
    public void print (java.io.PrintStream out)
    {
      out.print ("Stack now");

      for (int i = 0; i <= height; i++)
        {
	  out.print (' ');
	  out.print (stateStack[i]);
        }
      out.println ();
    }
  }

  /**
   * Returned by a Bison action in order to stop the parsing process and
   * return success (<tt>true</tt>).  */
  public static final int YYACCEPT = 0;

  /**
   * Returned by a Bison action in order to stop the parsing process and
   * return failure (<tt>false</tt>).  */
  public static final int YYABORT = 1;

  /**
   * Returned by a Bison action in order to start error recovery without
   * printing an error message.  */
  public static final int YYERROR = 2;

  // Internal return codes that are not supported for user semantic
  // actions.
  private static final int YYERRLAB = 3;
  private static final int YYNEWSTATE = 4;
  private static final int YYDEFAULT = 5;
  private static final int YYREDUCE = 6;
  private static final int YYERRLAB1 = 7;
  private static final int YYRETURN = 8;

  private int yyerrstatus_ = 0;

  /**
   * Return whether error recovery is being done.  In this state, the parser
   * reads token until it reaches a known state, and then restarts normal
   * operation.  */
  public final boolean recovering ()
  {
    return yyerrstatus_ == 0;
  }

  private int yyaction (int yyn, YYStack yystack, int yylen) 
  {
    Object yyval;
    

    /* If YYLEN is nonzero, implement the default value of the action:
       `$$ = $1'.  Otherwise, use the top of the stack.

       Otherwise, the following line sets YYVAL to garbage.
       This behavior is undocumented and Bison
       users should not rely upon it.  */
    if (yylen > 0)
      yyval = yystack.valueAt (yylen - 1);
    else
      yyval = yystack.valueAt (0);

    yy_reduce_print (yyn, yystack);

    switch (yyn)
      {
	  case 2:
  if (yyn == 2)
    
/* Line 351 of lalr1.java  */
/* Line 189 of "SHLang.yac"  */
    {
		System.out.println("Rule 1.1: " +
			"program: PROGRAM_KW saved_identifier declarations_list procedure_list MAIN_KW block");
		backpatch(((EVal)(yystack.valueAt (6-(6)))).nextList, nextQuad());
		exportIntermediateCode();
	};
  break;
    

  case 3:
  if (yyn == 3)
    
/* Line 351 of lalr1.java  */
/* Line 195 of "SHLang.yac"  */
    {
		System.out.println("Rule 1.2: " +
			"program: PROGRAM_KW saved_identifier procedure_list MAIN_KW block");
		backpatch(((EVal)(yystack.valueAt (5-(5)))).nextList, nextQuad());
		exportIntermediateCode();
	};
  break;
    

  case 4:
  if (yyn == 4)
    
/* Line 351 of lalr1.java  */
/* Line 201 of "SHLang.yac"  */
    {
		System.out.println("Rule 1.3: " +
			"program: PROGRAM_KW saved_identifier declarations_list MAIN_KW block");
		backpatch(((EVal)(yystack.valueAt (5-(5)))).nextList, nextQuad());
		exportIntermediateCode();
	};
  break;
    

  case 5:
  if (yyn == 5)
    
/* Line 351 of lalr1.java  */
/* Line 207 of "SHLang.yac"  */
    {
		System.out.println("Rule 1.4: " +
			"program: PROGRAM_KW saved_identifier MAIN_KW block");
		backpatch(((EVal)(yystack.valueAt (4-(4)))).nextList, nextQuad());
		exportIntermediateCode();
	};
  break;
    

  case 6:
  if (yyn == 6)
    
/* Line 351 of lalr1.java  */
/* Line 215 of "SHLang.yac"  */
    {
		System.out.println("Rule 2.1: " +
			"declarations_list: declarations_list declarations");
	};
  break;
    

  case 7:
  if (yyn == 7)
    
/* Line 351 of lalr1.java  */
/* Line 219 of "SHLang.yac"  */
    {
		System.out.println("Rule 2.2: " +
			"declarations_list: declarations");
	};
  break;
    

  case 8:
  if (yyn == 8)
    
/* Line 351 of lalr1.java  */
/* Line 225 of "SHLang.yac"  */
    {
		System.out.println("Rule 3: " +
			"declarations: type_specifiers declarator_list");
		if(((EVal)(yystack.valueAt (2-(2)))).type == EVal.TYPE_CODE_UNKNOWN || ((EVal)(yystack.valueAt (2-(1)))).type == ((EVal)(yystack.valueAt (2-(2)))).type) {
			for(int i = 0; i < ((EVal)(yystack.valueAt (2-(2)))).initializersList.size(); i++) {
				if(symbolTable.lookUp(sizeStr + ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place) == SymbolTable.NOT_IN_SYMBOL_TABLE) {
					symbolTable.addToSymbolTable(((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place, ((EVal)(yystack.valueAt (2-(1)))).type, false);
					if(((EVal)(yystack.valueAt (2-(2)))).initializersList.get(i) != null && ((EVal)(yystack.valueAt (2-(2)))).initializersList.get(i).size() == 1) {
						if(((EVal)(yystack.valueAt (2-(1)))).type != EVal.TYPE_CODE_BOOLEAN) {
							emit(":=", ((EVal)(yystack.valueAt (2-(2)))).initializersList.get(i).get(0).place, null, ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place);
							switch (((EVal)(yystack.valueAt (2-(1)))).type) {
								case EVal.TYPE_CODE_INTEGER:
									emit("iprint", null, null, ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place);
									break;
								case EVal.TYPE_CODE_REAL:
									emit("rprint", null, null, ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place);
									break;
								case EVal.TYPE_CODE_CHAR:
									emit("cprint", null, null, ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place);
									break;
							}
						} else {
							// backpatch($2.initializersList.get(i).get(0).falseList, nextQuad());
							// backpatch($2.initializersList.get(i).get(0).trueList, nextQuad() + 2);
							emit(":=", "0", null, ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place);
							emit("goto", null, null, String.valueOf(nextQuad() + 2));
							emit(":=", "1", null, ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place);
							emit("bprint", null, null, ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place);
						}
					} else if(((EVal)(yystack.valueAt (2-(2)))).initializersList.get(i) != null) {
						System.err.println("Error! Initializer number mismatch. (Expected: 1" + ", Number: " + ((EVal)(yystack.valueAt (2-(2)))).initializersList.get(i).size() + ")");
						return YYABORT;
					}
				} else {
					symbolTable.addToSymbolTable(((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place, ((EVal)(yystack.valueAt (2-(1)))).type, true);
					emit("malloc", getTypeString(((EVal)(yystack.valueAt (2-(1)))).type), sizeStr + ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place, ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place);
					if(((EVal)(yystack.valueAt (2-(2)))).initializersList.get(i) != null) {
						for(int j = 0; j < ((EVal)(yystack.valueAt (2-(2)))).initializersList.get(i).size(); j++) {
							EVal.arrayIndexOutOfBoundList.add(nextQuad() + 1);
							emit(">=", String.valueOf(j), sizeStr + ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place, condStr + ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place);
							emit("check", condStr + ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place, null, String.valueOf(nextQuad() + 2)); // Result will be backpatched.
							if(((EVal)(yystack.valueAt (2-(1)))).type != EVal.TYPE_CODE_BOOLEAN) {
								emit("[]=", ((EVal)(yystack.valueAt (2-(2)))).initializersList.get(i).get(j).place, String.valueOf(j), ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place);
								emit("+", startStr + ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place, String.valueOf(j), condStr + ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place);
								switch (((EVal)(yystack.valueAt (2-(1)))).type) {
									case EVal.TYPE_CODE_INTEGER:
										emit("aiprint", condStr + ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place, String.valueOf(j), ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place);
										break;
									case EVal.TYPE_CODE_REAL:
										emit("arprint", condStr + ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place, String.valueOf(j), ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place);
										break;
									case EVal.TYPE_CODE_CHAR:
										emit("acprint", condStr + ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place, String.valueOf(j), ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place);
										break;
								}
							} else {
								// backpatch($2.initializersList.get(i).get(j).falseList, nextQuad());
								// backpatch($2.initializersList.get(i).get(j).trueList, nextQuad() + 2);
								emit("[]=", "0", String.valueOf(j), ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place);
								emit("goto", null, null, String.valueOf(nextQuad() + 2));
								emit("[]=", "1", String.valueOf(j), ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place);
								emit("abprint", condStr + ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place, String.valueOf(j), ((EVal)(yystack.valueAt (2-(2)))).declareds.get(i).place);
							}
						}
					}
				}
			}
		} else {
			System.err.println("Error! Type specifier type mismatch. (" + ((EVal)(yystack.valueAt (2-(1)))).type + ", " + ((EVal)(yystack.valueAt (2-(2)))).type + ")");
			return YYABORT;
		}
	};
  break;
    

  case 9:
  if (yyn == 9)
    
/* Line 351 of lalr1.java  */
/* Line 299 of "SHLang.yac"  */
    {
		System.out.println("Rule 4.1: " +
			"type_specifiers: INTEGER_KW");
		yyval = new EVal();
		((EVal)yyval).type = EVal.TYPE_CODE_INTEGER;
	};
  break;
    

  case 10:
  if (yyn == 10)
    
/* Line 351 of lalr1.java  */
/* Line 305 of "SHLang.yac"  */
    {
		System.out.println("Rule 4.2: " +
			"type_specifiers: REAL_KW");
		yyval = new EVal();
		((EVal)yyval).type = EVal.TYPE_CODE_REAL;
	};
  break;
    

  case 11:
  if (yyn == 11)
    
/* Line 351 of lalr1.java  */
/* Line 311 of "SHLang.yac"  */
    {
		System.out.println("Rule 4.3: " +
			"type_specifiers: CHAR_KW");
		yyval = new EVal();
		((EVal)yyval).type = EVal.TYPE_CODE_CHAR;
	};
  break;
    

  case 12:
  if (yyn == 12)
    
/* Line 351 of lalr1.java  */
/* Line 317 of "SHLang.yac"  */
    {
		System.out.println("Rule 4.4: " +
			"type_specifiers: BOOLEAN_KW");
		yyval = new EVal();
		((EVal)yyval).type = EVal.TYPE_CODE_BOOLEAN;
	};
  break;
    

  case 13:
  if (yyn == 13)
    
/* Line 351 of lalr1.java  */
/* Line 325 of "SHLang.yac"  */
    {
		System.out.println("Rule 5.1: " +
			"declarator_list: declarator declarator_List");
		if(((EVal)(yystack.valueAt (2-(1)))).type == EVal.TYPE_CODE_UNKNOWN
			|| ((EVal)(yystack.valueAt (2-(1)))).type == ((EVal)(yystack.valueAt (2-(2)))).type) {
			yyval = new EVal();
			((EVal)yyval).type = ((EVal)(yystack.valueAt (2-(2)))).type;
			((EVal)yyval).declareds = ((EVal)(yystack.valueAt (2-(1)))).declareds;
			((EVal)yyval).declareds.add(((EVal)(yystack.valueAt (2-(2)))));
			((EVal)yyval).initializersList = ((EVal)(yystack.valueAt (2-(1)))).initializersList;
			((EVal)yyval).initializersList.add(((EVal)(yystack.valueAt (2-(2)))).initializers);
		} else {
			System.err.println("Error! Declarator type mismatch.");
			return YYABORT;
		}
	};
  break;
    

  case 14:
  if (yyn == 14)
    
/* Line 351 of lalr1.java  */
/* Line 341 of "SHLang.yac"  */
    {
		System.out.println("Rule 5.2: " +
			"delarator_list: declarator_end");
		yyval = new EVal();
		((EVal)yyval).type = ((EVal)(yystack.valueAt (1-(1)))).type;
		((EVal)yyval).declareds = EVal.makeInitializersOrDeclareds(((EVal)(yystack.valueAt (1-(1)))));
		((EVal)yyval).initializersList = EVal.makeInitializersList(((EVal)(yystack.valueAt (1-(1)))).initializers);
	};
  break;
    

  case 15:
  if (yyn == 15)
    
/* Line 351 of lalr1.java  */
/* Line 351 of "SHLang.yac"  */
    {
		System.out.println("Rule 6.1: " +
			"declarator: dec COMMA_KW");
		yyval = new EVal();
		((EVal)yyval).place = ((EVal)(yystack.valueAt (2-(1)))).place;
		((EVal)yyval).type = EVal.TYPE_CODE_UNKNOWN;
		((EVal)yyval).array = ((EVal)(yystack.valueAt (2-(1)))).array;
		((EVal)yyval).initializers = null;
	};
  break;
    

  case 16:
  if (yyn == 16)
    
/* Line 351 of lalr1.java  */
/* Line 360 of "SHLang.yac"  */
    {
		System.out.println("Rule 6.2: " +
			"declarator: dec ASS_KW initializer");
		if(((EVal)(yystack.valueAt (3-(1)))).array != ((EVal)(yystack.valueAt (3-(3)))).array) {
			System.err.println("Error! Array mismatch: " + ((EVal)(yystack.valueAt (3-(1)))).place + " and " + ((EVal)(yystack.valueAt (3-(3)))).place + " are not the same.");
			return YYABORT;
		}
		yyval = new EVal();
		((EVal)yyval).place = ((EVal)(yystack.valueAt (3-(1)))).place;
		((EVal)yyval).type = ((EVal)(yystack.valueAt (3-(3)))).type;
		((EVal)yyval).array = ((EVal)(yystack.valueAt (3-(1)))).array;
		((EVal)yyval).initializers = ((EVal)(yystack.valueAt (3-(3)))).initializers;
	};
  break;
    

  case 17:
  if (yyn == 17)
    
/* Line 351 of lalr1.java  */
/* Line 375 of "SHLang.yac"  */
    {
		System.out.println("Rule 6.1: " +
			"declarator_end: dec SEMICOLON_KW");
		yyval = new EVal();
		((EVal)yyval).place = ((EVal)(yystack.valueAt (2-(1)))).place;
		((EVal)yyval).type = EVal.TYPE_CODE_UNKNOWN;
		((EVal)yyval).initializers = null;
	};
  break;
    

  case 18:
  if (yyn == 18)
    
/* Line 351 of lalr1.java  */
/* Line 383 of "SHLang.yac"  */
    {
		System.out.println("Rule 6.2: " +
			"declarator_end: dec ASS_KW initializer SEMICOLON_KW");
		if(((EVal)(yystack.valueAt (4-(1)))).array != ((EVal)(yystack.valueAt (4-(3)))).array) {
			System.err.println("Error! Array mismatch: " + ((EVal)(yystack.valueAt (4-(1)))).place + " and " + ((EVal)(yystack.valueAt (4-(3)))).place + " are not the same.");
			return YYABORT;
		}
		yyval = new EVal();
		((EVal)yyval).place = ((EVal)(yystack.valueAt (4-(1)))).place;
		((EVal)yyval).type = ((EVal)(yystack.valueAt (4-(3)))).type;
		((EVal)yyval).array = ((EVal)(yystack.valueAt (4-(1)))).array;
		((EVal)yyval).initializers = ((EVal)(yystack.valueAt (4-(3)))).initializers;
	};
  break;
    

  case 19:
  if (yyn == 19)
    
/* Line 351 of lalr1.java  */
/* Line 396 of "SHLang.yac"  */
    {
		System.out.println("Rule 6.3: " +
			"declarator_end: dec ASS_KW initializer_end");
		if(((EVal)(yystack.valueAt (3-(1)))).array != ((EVal)(yystack.valueAt (3-(3)))).array) {
			System.err.println("Error! Array mismatch: " + ((EVal)(yystack.valueAt (3-(1)))).place + " and " + ((EVal)(yystack.valueAt (3-(3)))).place + " are not the same.");
			return YYABORT;
		}
		yyval = new EVal();
		((EVal)yyval).place = ((EVal)(yystack.valueAt (3-(1)))).place;
		((EVal)yyval).type = ((EVal)(yystack.valueAt (3-(3)))).type;
		((EVal)yyval).array = ((EVal)(yystack.valueAt (3-(1)))).array;
		((EVal)yyval).initializers = ((EVal)(yystack.valueAt (3-(3)))).initializers;
	};
  break;
    

  case 20:
  if (yyn == 20)
    
/* Line 351 of lalr1.java  */
/* Line 411 of "SHLang.yac"  */
    {
		System.out.println("Rule 7.1: " +
			"dec: saved_identifier");
		yyval = new EVal();
		((EVal)yyval).place = ((EVal)(yystack.valueAt (1-(1)))).place;
		((EVal)yyval).array = false;
	};
  break;
    

  case 21:
  if (yyn == 21)
    
/* Line 351 of lalr1.java  */
/* Line 418 of "SHLang.yac"  */
    {
		System.out.println("Rule 7.2: " +
			"dec: saved_identifier LB_KW range RB_KW");
		yyval = new EVal();
		((EVal)yyval).place = ((EVal)(yystack.valueAt (4-(1)))).place;
		((EVal)yyval).array = true;

		symbolTable.addToSymbolTable(startStr + ((EVal)yyval).place, EVal.TYPE_CODE_INTEGER, false);
		emit(":=", startStr + ((EVal)(yystack.valueAt (4-(3)))).place, null , startStr + ((EVal)yyval).place);

		symbolTable.addToSymbolTable(sizeStr + ((EVal)yyval).place, EVal.TYPE_CODE_INTEGER, false);
		emit(":=", sizeStr + ((EVal)(yystack.valueAt (4-(3)))).place, null , sizeStr + ((EVal)yyval).place);

		symbolTable.addToSymbolTable(indexStr + ((EVal)yyval).place, EVal.TYPE_CODE_INTEGER, false);
		symbolTable.addToSymbolTable(condStr + ((EVal)yyval).place, EVal.TYPE_CODE_INTEGER, false);
	};
  break;
    

  case 22:
  if (yyn == 22)
    
/* Line 351 of lalr1.java  */
/* Line 434 of "SHLang.yac"  */
    {
		System.out.println("Rule 7.3: " +
			"dec: saved_identifier LB_KW saved_integer RB_KW");
		yyval = new EVal();
		((EVal)yyval).place = ((EVal)(yystack.valueAt (4-(1)))).place;
		((EVal)yyval).array = true;

		symbolTable.addToSymbolTable(startStr + ((EVal)yyval).place, EVal.TYPE_CODE_INTEGER, false);
		emit(":=", "0", null , startStr + ((EVal)yyval).place);

		symbolTable.addToSymbolTable(sizeStr + ((EVal)yyval).place, EVal.TYPE_CODE_INTEGER, false);
		emit(":=", ((EVal)(yystack.valueAt (4-(3)))).place, null , sizeStr + ((EVal)yyval).place);

		symbolTable.addToSymbolTable(indexStr + ((EVal)yyval).place, EVal.TYPE_CODE_INTEGER, false);
		symbolTable.addToSymbolTable(condStr + ((EVal)yyval).place, EVal.TYPE_CODE_INTEGER, false);
	};
  break;
    

  case 23:
  if (yyn == 23)
    
/* Line 351 of lalr1.java  */
/* Line 452 of "SHLang.yac"  */
    {
		System.out.println("Rule 8.1: " +
			"range: saved_identifier TWO_DOTS_KW saved_identifier");
		int index1 = symbolTable.lookUp(((EVal)(yystack.valueAt (3-(1)))).place);
		int index2 = symbolTable.lookUp(((EVal)(yystack.valueAt (3-(3)))).place);
		if (index1 == SymbolTable.NOT_IN_SYMBOL_TABLE) {
			System.err.println("Error! \"" + ((EVal)(yystack.valueAt (3-(1)))).place + "\" is not declared.");
			return YYABORT;
		}
		if (index2 == SymbolTable.NOT_IN_SYMBOL_TABLE) {
			System.err.println("Error! \"" + ((EVal)(yystack.valueAt (3-(3)))).place + "\" is not declared.");
			return YYABORT;
		}

		if(symbolTable.types.get(index1) != EVal.TYPE_CODE_INTEGER) {
			System.err.println("Error! Type mismatch: " + ((EVal)(yystack.valueAt (3-(1)))).place + "is not integer.");
			return YYABORT;
		}
		if(symbolTable.types.get(index2) != EVal.TYPE_CODE_INTEGER) {
			System.err.println("Error! Type mismatch: " + ((EVal)(yystack.valueAt (3-(3)))).place + "is not integer.");
			return YYABORT;
		}

		yyval = new EVal();
		((EVal)yyval).place = newTemp(EVal.TYPE_CODE_RANGE, true);
		((EVal)yyval).type = EVal.TYPE_CODE_RANGE;
		((EVal)yyval).array = true;

		// Set start and size
		symbolTable.addToSymbolTable(startStr + ((EVal)yyval).place, EVal.TYPE_CODE_INTEGER, false);
		symbolTable.addToSymbolTable(sizeStr + ((EVal)yyval).place, EVal.TYPE_CODE_INTEGER, false);
		emit(":=", ((EVal)(yystack.valueAt (3-(1)))).place, null , startStr + ((EVal)yyval).place);
		emit("-", ((EVal)(yystack.valueAt (3-(3)))).place, ((EVal)(yystack.valueAt (3-(1)))).place , sizeStr + ((EVal)yyval).place);
		emit("+", sizeStr + ((EVal)yyval).place, "1", sizeStr + ((EVal)yyval).place);

		// Check size
		symbolTable.addToSymbolTable(condStr + ((EVal)yyval).place, EVal.TYPE_CODE_INTEGER, false);
		EVal.invalidArraySizeList.add(nextQuad() + 1);
		emit("<=", sizeStr + ((EVal)yyval).place, "0", condStr + ((EVal)yyval).place);
		emit("check", condStr + ((EVal)yyval).place, null, String.valueOf(nextQuad() + 1));
	};
  break;
    

  case 24:
  if (yyn == 24)
    
/* Line 351 of lalr1.java  */
/* Line 493 of "SHLang.yac"  */
    {
		System.out.println("Rule 8.2: " +
			"range: saved_integer TWO_DOTS_KW saved_integer");
		yyval = new EVal();
		((EVal)yyval).place = newTemp(EVal.TYPE_CODE_RANGE, true);
		((EVal)yyval).type = EVal.TYPE_CODE_RANGE;
		((EVal)yyval).array = true;

		// Set start and size
		symbolTable.addToSymbolTable(startStr + ((EVal)yyval).place, EVal.TYPE_CODE_INTEGER, false);
		symbolTable.addToSymbolTable(sizeStr + ((EVal)yyval).place, EVal.TYPE_CODE_INTEGER, false);
		emit(":=", ((EVal)(yystack.valueAt (3-(1)))).place, null , startStr + ((EVal)yyval).place);
		emit("-", ((EVal)(yystack.valueAt (3-(3)))).place, ((EVal)(yystack.valueAt (3-(1)))).place , sizeStr + ((EVal)yyval).place);
		emit("+", sizeStr + ((EVal)yyval).place, "1", sizeStr + ((EVal)yyval).place);

		// Check size
		symbolTable.addToSymbolTable(condStr + ((EVal)yyval).place, EVal.TYPE_CODE_INTEGER, false);
		EVal.invalidArraySizeList.add(nextQuad() + 1);
		emit("<=", sizeStr + ((EVal)yyval).place, "0", condStr + ((EVal)yyval).place);
		emit("check", condStr + ((EVal)yyval).place, null, String.valueOf(nextQuad() + 1));
	};
  break;
    

  case 25:
  if (yyn == 25)
    
/* Line 351 of lalr1.java  */
/* Line 514 of "SHLang.yac"  */
    {
		System.out.println("Rule 8.3: " +
			"range: arithmatic_expressions TWO_DOTS_KW arithmatic_expressions");
		if(((EVal)(yystack.valueAt (3-(1)))).type != EVal.TYPE_CODE_INTEGER) {
			System.err.println("Error! Type mismatch: " + ((EVal)(yystack.valueAt (3-(1)))).place + "is not integer.");
			return YYABORT;
		}
		if(((EVal)(yystack.valueAt (3-(3)))).type != EVal.TYPE_CODE_INTEGER) {
			System.err.println("Error! Type mismatch: " + ((EVal)(yystack.valueAt (3-(3)))).place + "is not integer.");
			return YYABORT;
		}

		yyval = new EVal();
		((EVal)yyval).place = newTemp(EVal.TYPE_CODE_RANGE, true);
		((EVal)yyval).type = EVal.TYPE_CODE_RANGE;
		((EVal)yyval).array = true;

		// Set start and size
		symbolTable.addToSymbolTable(startStr + ((EVal)yyval).place, EVal.TYPE_CODE_INTEGER, false);
		symbolTable.addToSymbolTable(sizeStr + ((EVal)yyval).place, EVal.TYPE_CODE_INTEGER, false);
		emit(":=", ((EVal)(yystack.valueAt (3-(1)))).place, null , startStr + ((EVal)yyval).place);
		emit("-", ((EVal)(yystack.valueAt (3-(3)))).place, ((EVal)(yystack.valueAt (3-(1)))).place , sizeStr + ((EVal)yyval).place);
		emit("+", sizeStr + ((EVal)yyval).place, "1", sizeStr + ((EVal)yyval).place);

		// Check size
		symbolTable.addToSymbolTable(condStr + ((EVal)yyval).place, EVal.TYPE_CODE_INTEGER, false);
		EVal.invalidArraySizeList.add(nextQuad() + 1);
		emit("<=", sizeStr + ((EVal)yyval).place, "0", condStr + ((EVal)yyval).place);
		emit("check", condStr + ((EVal)yyval).place, null, String.valueOf(nextQuad() + 1));
	};
  break;
    

  case 26:
  if (yyn == 26)
    
/* Line 351 of lalr1.java  */
/* Line 546 of "SHLang.yac"  */
    {
		System.out.println("Rule 9.1: " +
			"initializer: LCB_KW initializer_list RCB_KW");
		yyval = new EVal();
		((EVal)yyval).type = ((EVal)(yystack.valueAt (2-(2)))).type;
		((EVal)yyval).array = ((EVal)(yystack.valueAt (2-(2)))).array;
		((EVal)yyval).initializers = ((EVal)(yystack.valueAt (2-(2)))).initializers;
	};
  break;
    

  case 27:
  if (yyn == 27)
    
/* Line 351 of lalr1.java  */
/* Line 554 of "SHLang.yac"  */
    {
		System.out.println("Rule 9.2: " +
			"initializer: initializer_list");
		yyval = new EVal();
		((EVal)yyval).type = ((EVal)(yystack.valueAt (1-(1)))).type;
		((EVal)yyval).array = ((EVal)(yystack.valueAt (1-(1)))).array;
		((EVal)yyval).initializers = ((EVal)(yystack.valueAt (1-(1)))).initializers;
	};
  break;
    

  case 28:
  if (yyn == 28)
    
/* Line 351 of lalr1.java  */
/* Line 564 of "SHLang.yac"  */
    {
		System.out.println("Rule 10.1: " +
			"initializer_list_in_cb: initializer_list constant_expressions RCB_KW");
		if(((EVal)(yystack.valueAt (3-(1)))).type == ((EVal)(yystack.valueAt (3-(2)))).type) {
			yyval = new EVal();
			((EVal)yyval).type = ((EVal)(yystack.valueAt (3-(1)))).type;
			((EVal)yyval).array = true;
			((EVal)yyval).initializers = ((EVal)(yystack.valueAt (3-(1)))).initializers;
			((EVal)yyval).initializers.add(((EVal)(yystack.valueAt (3-(2)))));
		} else {
			System.err.println("Error! " + "Initializer type mismatch.");
			return YYABORT;
		}
	};
  break;
    

  case 29:
  if (yyn == 29)
    
/* Line 351 of lalr1.java  */
/* Line 578 of "SHLang.yac"  */
    {
		System.out.println("Rule 10.2: " +
			"initializer_list_in_cb: constant_expressions RCB_KW");
		yyval = new EVal();
		((EVal)yyval).type = ((EVal)(yystack.valueAt (2-(1)))).type;
		((EVal)yyval).array = true;
		((EVal)yyval).initializers = EVal.makeInitializersOrDeclareds(((EVal)(yystack.valueAt (2-(1)))));
	};
  break;
    

  case 30:
  if (yyn == 30)
    
/* Line 351 of lalr1.java  */
/* Line 588 of "SHLang.yac"  */
    {
		System.out.println("Rule 10.1: " +
			"initializer_list: constant_expressions COMMA_KW initializer_list");
		if(((EVal)(yystack.valueAt (3-(1)))).type == ((EVal)(yystack.valueAt (3-(2)))).type) {
			yyval = new EVal();
			((EVal)yyval).type = ((EVal)(yystack.valueAt (3-(1)))).type;
			((EVal)yyval).array = true;
			((EVal)yyval).initializers = ((EVal)(yystack.valueAt (3-(1)))).initializers;
			((EVal)yyval).initializers.add(((EVal)(yystack.valueAt (3-(2)))));
		} else {
			System.err.println("Error! Initializer type mismatch.");
			return YYABORT;
		}
	};
  break;
    

  case 31:
  if (yyn == 31)
    
/* Line 351 of lalr1.java  */
/* Line 602 of "SHLang.yac"  */
    {
		System.out.println("Rule 10.2: " +
			"initializer_list: constant_expressions COMMA_KW");
		yyval = new EVal();
		((EVal)yyval).type = ((EVal)(yystack.valueAt (2-(1)))).type;
		((EVal)yyval).array = false;
		((EVal)yyval).initializers = EVal.makeInitializersOrDeclareds(((EVal)(yystack.valueAt (2-(1)))));
	};
  break;
    

  case 32:
  if (yyn == 32)
    
/* Line 351 of lalr1.java  */
/* Line 612 of "SHLang.yac"  */
    {
		System.out.println("Rule 10.2: " +
			"initializer_end: initializer_list constant_expressions SEMICOLON_KW");
		if(((EVal)(yystack.valueAt (3-(1)))).type == ((EVal)(yystack.valueAt (3-(2)))).type) {
			yyval = new EVal();
			((EVal)yyval).type = ((EVal)(yystack.valueAt (3-(1)))).type;
			((EVal)yyval).array = true;
			((EVal)yyval).initializers = ((EVal)(yystack.valueAt (3-(1)))).initializers;
			((EVal)yyval).initializers.add(((EVal)(yystack.valueAt (3-(2)))));
		} else {
			System.err.println("Error! Initializer type mismatch.");
			return YYABORT;
		}
	};
  break;
    

  case 33:
  if (yyn == 33)
    
/* Line 351 of lalr1.java  */
/* Line 626 of "SHLang.yac"  */
    {
		System.out.println("Rule 10.2: " +
			"initializer_end: constant_expressions SEMICOLON_KW");
		yyval = new EVal();
		((EVal)yyval).type = ((EVal)(yystack.valueAt (2-(1)))).type;
		((EVal)yyval).array = false;
		((EVal)yyval).initializers = EVal.makeInitializersOrDeclareds(((EVal)(yystack.valueAt (2-(1)))));
	};
  break;
    

  case 34:
  if (yyn == 34)
    
/* Line 351 of lalr1.java  */
/* Line 636 of "SHLang.yac"  */
    {
		System.out.println("Rule 11.1: " +
			"procedure_list: procedure");
	};
  break;
    

  case 35:
  if (yyn == 35)
    
/* Line 351 of lalr1.java  */
/* Line 640 of "SHLang.yac"  */
    {
		System.out.println("Rule 11.2: " +
			"procedure_list: procedure_list procedure");
	};
  break;
    

  case 36:
  if (yyn == 36)
    
/* Line 351 of lalr1.java  */
/* Line 646 of "SHLang.yac"  */
    {
		System.out.println("Rule 12.1: " +
			"procedure: PROCEDURE_KW saved_identifier parameters LCB_KW declarations_list block RCB_KW");
	};
  break;
    

  case 37:
  if (yyn == 37)
    
/* Line 351 of lalr1.java  */
/* Line 650 of "SHLang.yac"  */
    {
		System.out.println("Rule 12.2: " +
			"procedure: PROCEDURE_KW saved_identifier parameters LCB_KW block RCB_KW");
	};
  break;
    

  case 38:
  if (yyn == 38)
    
/* Line 351 of lalr1.java  */
/* Line 656 of "SHLang.yac"  */
    {
		System.out.println("Rule 13: " +
			"parameters: LP_KW declarations_list RP_KW");
	};
  break;
    

  case 39:
  if (yyn == 39)
    
/* Line 351 of lalr1.java  */
/* Line 660 of "SHLang.yac"  */
    {
		System.out.println("Rule 13: " +
			"parameters: LP_KW RP_KW");
	};
  break;
    

  case 40:
  if (yyn == 40)
    
/* Line 351 of lalr1.java  */
/* Line 666 of "SHLang.yac"  */
    {
		System.out.println("Rule 14.1: " +
			"block: LCB_KW statement_list RCB_KW ");
		yyval = new EVal();
		((EVal)yyval).nextList = ((EVal)(yystack.valueAt (3-(2)))).nextList;
	};
  break;
    

  case 41:
  if (yyn == 41)
    
/* Line 351 of lalr1.java  */
/* Line 672 of "SHLang.yac"  */
    {
		System.out.println("Rule 14.2: " +
			"block: LCB_KW RCB_KW ");
		yyval = new EVal();
		((EVal)yyval).nextList = EVal.makeList(nextQuad());
		emit("goto", null, null, String.valueOf(nextQuad() + 1)); // result will be backpatched
	};
  break;
    

  case 42:
  if (yyn == 42)
    
/* Line 351 of lalr1.java  */
/* Line 681 of "SHLang.yac"  */
    {
		System.out.println("Rule 15.1: " +
			"statement_list: statement SEMICOLON_KW");
		yyval = new EVal();
		((EVal)yyval).nextList = EVal.makeList(((EVal)(yystack.valueAt (2-(2)))).quad);
	};
  break;
    

  case 43:
  if (yyn == 43)
    
/* Line 351 of lalr1.java  */
/* Line 687 of "SHLang.yac"  */
    {
		System.out.println("Rule 15.2: " +
			"statement_list: statement SEMICOLON_KW");
		yyval = new EVal();
		((EVal)yyval).nextList = ((EVal)(yystack.valueAt (3-(1)))).nextList;
	};
  break;
    

  case 44:
  if (yyn == 44)
    
/* Line 351 of lalr1.java  */
/* Line 693 of "SHLang.yac"  */
    {
		System.out.println("Rule 15.3: " +
			"statement_list: statement_list statement SEMICOLON_KW");
		yyval = new EVal();
		((EVal)yyval).nextList = ((EVal)(yystack.valueAt (4-(3)))).nextList;
		backpatch(((EVal)(yystack.valueAt (4-(1)))).nextList, ((EVal)(yystack.valueAt (4-(2)))).quad);
	};
  break;
    

  case 45:
  if (yyn == 45)
    
/* Line 351 of lalr1.java  */
/* Line 702 of "SHLang.yac"  */
    {
		System.out.println("Rule 26.1: " +
			"statement: matched");
	};
  break;
    

  case 46:
  if (yyn == 46)
    
/* Line 351 of lalr1.java  */
/* Line 706 of "SHLang.yac"  */
    {
		System.out.println("Rule 26.2: " +
			"statement: unmatched");
	};
  break;
    

  case 47:
  if (yyn == 47)
    
/* Line 351 of lalr1.java  */
/* Line 712 of "SHLang.yac"  */
    {
		System.out.println("Rule 24.1: " +
			"matched: IF_KW bool_expressions THEN_KW matched ELSE_KW matched");
		yyval = new EVal();
		backpatch(((EVal)(yystack.valueAt (9-(2)))).trueList, ((EVal)(yystack.valueAt (9-(4)))).quad);
		backpatch(((EVal)(yystack.valueAt (9-(2)))).falseList, ((EVal)(yystack.valueAt (9-(8)))).quad);
		((EVal)yyval).nextList = EVal.merge(((EVal)(yystack.valueAt (9-(5)))).nextList, ((EVal)(yystack.valueAt (9-(6)))).nextList);
		((EVal)yyval).nextList = EVal.merge(((EVal)yyval).nextList, ((EVal)(yystack.valueAt (9-(9)))).nextList);
	};
  break;
    

  case 48:
  if (yyn == 48)
    
/* Line 351 of lalr1.java  */
/* Line 721 of "SHLang.yac"  */
    {
		System.out.println("Rule 24.2: " +
			"matched: other_statement");
		yyval = new EVal();
		((EVal)yyval).nextList = ((EVal)(yystack.valueAt (1-(1)))).nextList;
	};
  break;
    

  case 49:
  if (yyn == 49)
    
/* Line 351 of lalr1.java  */
/* Line 729 of "SHLang.yac"  */
    {
		System.out.println("Rule 25.1: " +
			"unmatched: IF_KW bool_expressions THEN_KW matched ELSE_KW unmatched");
		yyval = new EVal();
		backpatch(((EVal)(yystack.valueAt (9-(2)))).trueList, ((EVal)(yystack.valueAt (9-(4)))).quad);
		backpatch(((EVal)(yystack.valueAt (9-(2)))).falseList, ((EVal)(yystack.valueAt (9-(8)))).quad);
		((EVal)yyval).nextList = EVal.merge(((EVal)(yystack.valueAt (9-(5)))).nextList, ((EVal)(yystack.valueAt (9-(6)))).nextList);
		((EVal)yyval).nextList = EVal.merge(((EVal)yyval).nextList, ((EVal)(yystack.valueAt (9-(9)))).nextList);
	};
  break;
    

  case 50:
  if (yyn == 50)
    
/* Line 351 of lalr1.java  */
/* Line 738 of "SHLang.yac"  */
    {
		System.out.println("Rule 25.2: " +
			"unmatched: IF_KW bool_expressions THEN_KW statement");
		yyval = new EVal();
		backpatch(((EVal)(yystack.valueAt (5-(2)))).trueList, ((EVal)(yystack.valueAt (5-(4)))).quad);
		((EVal)yyval).nextList = EVal.merge(((EVal)(yystack.valueAt (5-(2)))).falseList, ((EVal)(yystack.valueAt (5-(5)))).nextList);
	};
  break;
    

  case 51:
  if (yyn == 51)
    
/* Line 351 of lalr1.java  */
/* Line 748 of "SHLang.yac"  */
    {
		System.out.println("Rule 16.1: " +
			"other_statement: saved_identifier ASS_KW expressions");
		int index = symbolTable.lookUp(((EVal)(yystack.valueAt (3-(1)))).place);
		if (index == SymbolTable.NOT_IN_SYMBOL_TABLE) {
			System.err.println("Error! \"" + ((EVal)(yystack.valueAt (3-(1)))).place + "\" is not declared.");
			return YYABORT;
		}
		if(symbolTable.types.get(index) != ((EVal)(yystack.valueAt (3-(3)))).type) {
			System.err.println("Error! Type mismatch: " + ((EVal)(yystack.valueAt (3-(1)))).place + ", " + ((EVal)(yystack.valueAt (3-(3)))).place);
			return YYABORT;
		}
		if (symbolTable.arrays.get(index)) {
			System.err.println("Error! \"" + lexIdentifier + "\" is an array, it can not be used without index.");
			return YYABORT;
		}
		yyval = new EVal();
		((EVal)yyval).place = symbolTable.names.get(index);
		((EVal)yyval).type = ((EVal)(yystack.valueAt (3-(3)))).type;
		if(((EVal)(yystack.valueAt (3-(3)))).type != EVal.TYPE_CODE_BOOLEAN) {
			((EVal)yyval).nextList = ((EVal)(yystack.valueAt (3-(1)))).nextList;
			emit(":=", ((EVal)(yystack.valueAt (3-(3)))).place, null, ((EVal)(yystack.valueAt (3-(1)))).place);
			switch (((EVal)(yystack.valueAt (3-(3)))).type) {
				case EVal.TYPE_CODE_INTEGER:
					emit("iprint", null, null, ((EVal)(yystack.valueAt (3-(1)))).place);
					break;
				case EVal.TYPE_CODE_REAL:
					emit("rprint", null, null, ((EVal)(yystack.valueAt (3-(1)))).place);
					break;
				case EVal.TYPE_CODE_CHAR:
					emit("cprint", null, null, ((EVal)(yystack.valueAt (3-(1)))).place);
					break;
			}
		} else {
			backpatch(((EVal)(yystack.valueAt (3-(3)))).falseList, nextQuad());
			backpatch(((EVal)(yystack.valueAt (3-(3)))).trueList, nextQuad() + 2);
			emit(":=", "0", null, ((EVal)yyval).place);
			emit("goto", null, null, String.valueOf(nextQuad() + 2));
			emit(":=", "1", null, ((EVal)yyval).place);
			emit("bprint", null, null, ((EVal)(yystack.valueAt (3-(1)))).place);
		}
		((EVal)yyval).nextList = EVal.makeList(nextQuad());
		emit("goto", null, null, String.valueOf(nextQuad() + 1)); // result will be backpatched.
	};
  break;
    

  case 52:
  if (yyn == 52)
    
/* Line 351 of lalr1.java  */
/* Line 792 of "SHLang.yac"  */
    {
		System.out.println("Rule 16.1: " +
			"other_statement: saved_identifier ASS_KW expressions");
		int index = symbolTable.lookUp(((EVal)(yystack.valueAt (6-(1)))).place);
		if (index == SymbolTable.NOT_IN_SYMBOL_TABLE) {
			System.err.println("Error! \"" + ((EVal)(yystack.valueAt (6-(1)))).place + "\" is not declared.");
			return YYABORT;
		}
		if(symbolTable.types.get(index) != ((EVal)(yystack.valueAt (6-(6)))).type) {
			System.err.println("Error! Type mismatch: " + ((EVal)(yystack.valueAt (6-(1)))).place + ", " + ((EVal)(yystack.valueAt (6-(3)))).place);
			return YYABORT;
		}
		if (!symbolTable.arrays.get(index)) {
			System.err.println("Error! \"" + lexIdentifier + "\" is not an array, it can not be used with index.");
			return YYABORT;
		}
		yyval = new EVal();
		((EVal)yyval).place = symbolTable.names.get(index);
		((EVal)yyval).type = ((EVal)(yystack.valueAt (6-(3)))).type;
		((EVal)yyval).array = true;
		EVal.arrayIndexOutOfBoundList.add(nextQuad() + 2);
		EVal.arrayIndexOutOfBoundList.add(nextQuad() + 4);
		emit("-", ((EVal)(yystack.valueAt (6-(3)))).place, startStr + ((EVal)(yystack.valueAt (6-(1)))).place, indexStr + ((EVal)(yystack.valueAt (6-(1)))).place);
		emit(">=", indexStr + ((EVal)(yystack.valueAt (6-(1)))).place, sizeStr + ((EVal)(yystack.valueAt (6-(1)))).place, condStr + ((EVal)(yystack.valueAt (6-(1)))).place);
		emit("check", condStr + ((EVal)(yystack.valueAt (6-(1)))).place, null, String.valueOf(nextQuad() + 4)); // result will be backpatched.
		emit("<", indexStr + ((EVal)(yystack.valueAt (6-(1)))).place, "0", condStr + ((EVal)(yystack.valueAt (6-(1)))).place);
		emit("check", condStr + ((EVal)(yystack.valueAt (6-(1)))).place, null, String.valueOf(nextQuad() + 2)); // result will be backpatched.
		if(((EVal)(yystack.valueAt (6-(6)))).type != EVal.TYPE_CODE_BOOLEAN) {
			emit("[]=", ((EVal)(yystack.valueAt (6-(6)))).place, indexStr + ((EVal)(yystack.valueAt (6-(1)))).place, ((EVal)(yystack.valueAt (6-(1)))).place);
			switch (((EVal)(yystack.valueAt (6-(6)))).type) {
				case EVal.TYPE_CODE_INTEGER:
					emit("aiprint", ((EVal)(yystack.valueAt (6-(3)))).place, indexStr + ((EVal)(yystack.valueAt (6-(1)))).place, ((EVal)(yystack.valueAt (6-(1)))).place);
					break;
				case EVal.TYPE_CODE_REAL:
					emit("arprint", ((EVal)(yystack.valueAt (6-(3)))).place, indexStr + ((EVal)(yystack.valueAt (6-(1)))).place, ((EVal)(yystack.valueAt (6-(1)))).place);
					break;
				case EVal.TYPE_CODE_CHAR:
					emit("acprint", ((EVal)(yystack.valueAt (6-(3)))).place, indexStr + ((EVal)(yystack.valueAt (6-(1)))).place, ((EVal)(yystack.valueAt (6-(1)))).place);
					break;
			}
		} else {
			backpatch(((EVal)(yystack.valueAt (6-(3)))).falseList, nextQuad());
			backpatch(((EVal)(yystack.valueAt (6-(3)))).trueList, nextQuad() + 2);
			emit("[]=", "0", indexStr + ((EVal)(yystack.valueAt (6-(1)))).place, ((EVal)yyval).place);
			emit("goto", null, null, String.valueOf(nextQuad() + 2));
			emit("[]=", "1", indexStr + ((EVal)(yystack.valueAt (6-(1)))).place, ((EVal)yyval).place);
			emit("abprint", ((EVal)(yystack.valueAt (6-(3)))).place, indexStr + ((EVal)(yystack.valueAt (6-(1)))).place, ((EVal)(yystack.valueAt (6-(1)))).place);
		}

		((EVal)yyval).nextList = EVal.makeList(nextQuad());
		emit("goto", null, null, String.valueOf(nextQuad() + 1)); // result will be backpatched.
	};
  break;
    

  case 53:
  if (yyn == 53)
    
/* Line 351 of lalr1.java  */
/* Line 844 of "SHLang.yac"  */
    {
		System.out.println("Rule 16.4: " +
			"other_statement: DO_KW statement WHILE_KW bool_expressions");
		yyval = new EVal();
		((EVal)yyval).nextList = ((EVal)(yystack.valueAt (6-(6)))).falseList;

		backpatch(((EVal)(yystack.valueAt (6-(3)))).nextList, ((EVal)(yystack.valueAt (6-(5)))).quad);
		backpatch(((EVal)(yystack.valueAt (6-(6)))).trueList, ((EVal)(yystack.valueAt (6-(2)))).quad);
	};
  break;
    

  case 54:
  if (yyn == 54)
    
/* Line 351 of lalr1.java  */
/* Line 853 of "SHLang.yac"  */
    {
		System.out.println("Rule 16.5: " +
			"other_statement: FOR_KW saved_identifier IN_KW range N REPEAT_KW M block");
		int index = symbolTable.lookUp(((EVal)(yystack.valueAt (8-(2)))).place);
		if (index == SymbolTable.NOT_IN_SYMBOL_TABLE) {
			System.err.println("Error! \"" + ((EVal)(yystack.valueAt (8-(1)))).place + "\" is not declared.");
			return YYABORT;
		}
		if(symbolTable.types.get(index) != EVal.TYPE_CODE_INTEGER) {
			System.err.println("Error! Type mismatch: " + ((EVal)(yystack.valueAt (8-(1)))).place + ", Integer");
			return YYABORT;
		}
		if (symbolTable.arrays.get(index)) {
			System.err.println("Error! \"" + lexIdentifier + "\" is an array, it can not be used in for initializer.");
			return YYABORT;
		}
		
		yyval = new EVal();
		
		backpatch(((EVal)(yystack.valueAt (8-(5)))).nextList, nextQuad());
		backpatch(((EVal)(yystack.valueAt (8-(8)))).nextList, nextQuad() + 5);
		
		emit(":=", startStr + ((EVal)(yystack.valueAt (8-(4)))).place, null, ((EVal)(yystack.valueAt (8-(2)))).place);
		emit("-", ((EVal)(yystack.valueAt (8-(2)))).place, startStr + ((EVal)(yystack.valueAt (8-(4)))).place, condStr + ((EVal)(yystack.valueAt (8-(4)))).place);
		emit("<", condStr + ((EVal)(yystack.valueAt (8-(4)))).place, sizeStr + ((EVal)(yystack.valueAt (8-(4)))).place, condStr + ((EVal)(yystack.valueAt (8-(4)))).place);
		emit("check", condStr + ((EVal)(yystack.valueAt (8-(4)))).place, null, String.valueOf(((EVal)(yystack.valueAt (8-(7)))).quad));
		emit("goto", null, null, String.valueOf(nextQuad() + 3)); // result will be backpatched;
		emit("+", ((EVal)(yystack.valueAt (8-(2)))).place, "1", ((EVal)(yystack.valueAt (8-(2)))).place);
		emit("goto", null, null, String.valueOf(nextQuad() - 5));
		
		((EVal)yyval).nextList = EVal.makeList(nextQuad() - 3);
	};
  break;
    

  case 55:
  if (yyn == 55)
    
/* Line 351 of lalr1.java  */
/* Line 885 of "SHLang.yac"  */
    {
		System.out.println("Rule 16.6.1: " +
			"other_statement: SWITCH_KW expressions caseelement default END_KW");
		if(((EVal)(yystack.valueAt (6-(3)))).type != EVal.TYPE_CODE_INTEGER) {
			System.err.println("Error! Switch expression type mismatch. (\"" + ((EVal)(yystack.valueAt (6-(3)))).place + "\" is not integer.)");
			return YYABORT;
		}
		yyval = new EVal();
		((EVal)yyval).place = newTemp(EVal.TYPE_CODE_INTEGER, false);
		((EVal)yyval).nextList = EVal.merge(((EVal)(yystack.valueAt (6-(4)))).nextList, ((EVal)(yystack.valueAt (6-(5)))).nextList);

		int last = ((EVal)(yystack.valueAt (6-(4)))).falseList.size() - 1;
		backpatch(((EVal)(yystack.valueAt (6-(3)))).nextList, ((EVal)(yystack.valueAt (6-(4)))).initList.get(0));
		backpatch(((EVal)(yystack.valueAt (6-(4)))).falseList.get(last), nextQuad());
		for(int i = 0; i < ((EVal)(yystack.valueAt (6-(4)))).declareds.size() - 1; i++) {
			backpatch(((EVal)(yystack.valueAt (6-(4)))).falseList.get(i), ((EVal)(yystack.valueAt (6-(4)))).initList.get(i + 1));

			emit("=", ((EVal)(yystack.valueAt (6-(2)))).place, ((EVal)(yystack.valueAt (6-(4)))).declareds.get(i).place, ((EVal)yyval).place);
			emit("check", ((EVal)yyval).place, null, String.valueOf(((EVal)(yystack.valueAt (6-(4)))).trueList.get(i))); // result will not be backpatched.
		}
		emit("=", ((EVal)(yystack.valueAt (6-(2)))).place, ((EVal)(yystack.valueAt (6-(4)))).declareds.get(last).place, ((EVal)yyval).place);
		emit("check", ((EVal)yyval).place, null, String.valueOf(((EVal)(yystack.valueAt (6-(4)))).trueList.get(last))); // result will not be backpatched.

		emit("goto", null, null, String.valueOf(((EVal)(yystack.valueAt (6-(5)))).quad)); // result will not be backpatched.
	};
  break;
    

  case 56:
  if (yyn == 56)
    
/* Line 351 of lalr1.java  */
/* Line 910 of "SHLang.yac"  */
    {
		System.out.println("Rule 16.6.2: " +
			"other_statement: SWITCH_KW expressions caseelement END_KW");
		if(((EVal)(yystack.valueAt (5-(3)))).type != EVal.TYPE_CODE_INTEGER) {
			System.err.println("Error! Switch expression type mismatch. (\"" + ((EVal)(yystack.valueAt (5-(3)))).place + "\" is not integer.)");
			return YYABORT;
		}
		yyval = new EVal();
		((EVal)yyval).place = newTemp(EVal.TYPE_CODE_INTEGER, false);
		((EVal)yyval).nextList = ((EVal)(yystack.valueAt (5-(4)))).nextList;

		int last = ((EVal)(yystack.valueAt (5-(4)))).falseList.size() - 1;
		backpatch(((EVal)(yystack.valueAt (5-(3)))).nextList, ((EVal)(yystack.valueAt (5-(4)))).initList.get(0));
		backpatch(((EVal)(yystack.valueAt (5-(4)))).falseList.get(last), nextQuad());
		for(int i = 0; i < ((EVal)(yystack.valueAt (5-(4)))).declareds.size() - 1; i++) {
			backpatch(((EVal)(yystack.valueAt (5-(4)))).falseList.get(i), ((EVal)(yystack.valueAt (5-(4)))).initList.get(i + 1));

			emit("=", ((EVal)(yystack.valueAt (5-(2)))).place, ((EVal)(yystack.valueAt (5-(4)))).declareds.get(i).place, ((EVal)yyval).place);
			emit("check", ((EVal)yyval).place, null, String.valueOf(((EVal)(yystack.valueAt (5-(4)))).trueList.get(i))); // result will not be backpatched.
		}
		emit("=", ((EVal)(yystack.valueAt (5-(2)))).place, ((EVal)(yystack.valueAt (5-(4)))).declareds.get(last).place, ((EVal)yyval).place);
		emit("check", ((EVal)yyval).place, null, String.valueOf(((EVal)(yystack.valueAt (5-(4)))).trueList.get(last))); // result will not be backpatched.

		((EVal)yyval).nextList.add(nextQuad());
		emit("goto", null, null, String.valueOf(nextQuad())); // result will be backpatched.
	};
  break;
    

  case 57:
  if (yyn == 57)
    
/* Line 351 of lalr1.java  */
/* Line 936 of "SHLang.yac"  */
    {
		System.out.println("Rule 16.7.1: " +
			"other_statement: saved_identifier LP_KW arguments RP_KW");
	};
  break;
    

  case 58:
  if (yyn == 58)
    
/* Line 351 of lalr1.java  */
/* Line 940 of "SHLang.yac"  */
    {
		System.out.println("Rule 16.7.2: " +
			"other_statement: saved_identifier LP_KW RP_KW");
	};
  break;
    

  case 59:
  if (yyn == 59)
    
/* Line 351 of lalr1.java  */
/* Line 944 of "SHLang.yac"  */
    {
		System.out.println("Rule 16.8: " +
			"other_statement: RETURN_KW expressions");
	};
  break;
    

  case 60:
  if (yyn == 60)
    
/* Line 351 of lalr1.java  */
/* Line 948 of "SHLang.yac"  */
    {
		System.out.println("Rule 16.9: " +
			"other_statement: EXIT_KW WHEN_KW LP_KW bool_expressions RP_KW");
	};
  break;
    

  case 61:
  if (yyn == 61)
    
/* Line 351 of lalr1.java  */
/* Line 952 of "SHLang.yac"  */
    {
		System.out.println("Rule 16.10: " +
			"other_statement: block");
	};
  break;
    

  case 62:
  if (yyn == 62)
    
/* Line 351 of lalr1.java  */
/* Line 958 of "SHLang.yac"  */
    {
		System.out.println("Rule 17.1: " +
			"arguments: declarator_list");
	};
  break;
    

  case 63:
  if (yyn == 63)
    
/* Line 351 of lalr1.java  */
/* Line 964 of "SHLang.yac"  */
    { ///////////////////// TODO \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
		System.out.println("Rule 18.1: " +
			"caseelement: CASE_KW saved_integer COLON_KW block SEMICOLON_KW");
		yyval = new EVal();
		((EVal)yyval).initList = EVal.makeList(((EVal)(yystack.valueAt (8-(2)))).quad); // Starting point of saving saved_integer is stored in initList;
		((EVal)yyval).declareds = EVal.makeInitializersOrDeclareds(((EVal)(yystack.valueAt (8-(3))))); // saved_integer value is stored in declareds.
		((EVal)yyval).falseList = ((EVal)(yystack.valueAt (8-(4)))).nextList; // If there is another init point this will be backpatched to next init point, else to test point.
		((EVal)yyval).trueList = EVal.makeList(((EVal)(yystack.valueAt (8-(6)))).quad); // Starting point of block is stored in trueList;
		((EVal)yyval).nextList = ((EVal)(yystack.valueAt (8-(7)))).nextList;
	};
  break;
    

  case 64:
  if (yyn == 64)
    
/* Line 351 of lalr1.java  */
/* Line 974 of "SHLang.yac"  */
    {
		System.out.println("Rule 18.2: " +
			"caseelement: caseelement CASE_KW saved_integer COLON_KW block SEMICOLON_KW");
		yyval = new EVal();
		((EVal)yyval).initList = ((EVal)(yystack.valueAt (9-(1)))).initList;
		((EVal)yyval).initList.add(((EVal)(yystack.valueAt (9-(3)))).quad);
		((EVal)yyval).declareds = ((EVal)(yystack.valueAt (9-(1)))).declareds;
		((EVal)yyval).declareds.add(((EVal)(yystack.valueAt (9-(4)))));
		((EVal)yyval).falseList = EVal.merge(((EVal)(yystack.valueAt (9-(1)))).falseList, ((EVal)(yystack.valueAt (9-(5)))).nextList);
		((EVal)yyval).trueList = ((EVal)(yystack.valueAt (9-(1)))).trueList;
		((EVal)yyval).trueList.add(((EVal)(yystack.valueAt (9-(7)))).quad);
		((EVal)yyval).nextList = EVal.merge(((EVal)(yystack.valueAt (9-(1)))).nextList, ((EVal)(yystack.valueAt (9-(8)))).nextList);
	};
  break;
    

  case 65:
  if (yyn == 65)
    
/* Line 351 of lalr1.java  */
/* Line 989 of "SHLang.yac"  */
    {
		System.out.println("Rule 19: " +
			"default: DEFAULT_KW COLON_KW block SEMICOLON_KW");
		yyval = new EVal();
		((EVal)yyval).quad = ((EVal)(yystack.valueAt (6-(3)))).quad;
		((EVal)yyval).nextList = ((EVal)(yystack.valueAt (6-(5)))).nextList;
	};
  break;
    

  case 66:
  if (yyn == 66)
    
/* Line 351 of lalr1.java  */
/* Line 998 of "SHLang.yac"  */
    {
		System.out.println("Rule 20.1: " +
			"expressions: constant_expressions");
		yyval = new EVal();
		((EVal)yyval).place = ((EVal)(yystack.valueAt (1-(1)))).place;
		((EVal)yyval).type = ((EVal)(yystack.valueAt (1-(1)))).type;
		if(((EVal)yyval).type != EVal.TYPE_CODE_BOOLEAN) {
			((EVal)yyval).nextList = ((EVal)(yystack.valueAt (1-(1)))).nextList;	
		} else {
			((EVal)yyval).trueList = ((EVal)(yystack.valueAt (1-(1)))).trueList;
			((EVal)yyval).falseList = ((EVal)(yystack.valueAt (1-(1)))).falseList;
		}
	};
  break;
    

  case 67:
  if (yyn == 67)
    
/* Line 351 of lalr1.java  */
/* Line 1011 of "SHLang.yac"  */
    {
		System.out.println("Rule 20.2: " +
			"expressions: bool_expressions");
		yyval = new EVal();
		((EVal)yyval).place = ((EVal)(yystack.valueAt (1-(1)))).place;
		((EVal)yyval).type = EVal.TYPE_CODE_BOOLEAN;
		((EVal)yyval).trueList = ((EVal)(yystack.valueAt (1-(1)))).trueList;
		((EVal)yyval).falseList = ((EVal)(yystack.valueAt (1-(1)))).falseList;
	};
  break;
    

  case 68:
  if (yyn == 68)
    
/* Line 351 of lalr1.java  */
/* Line 1020 of "SHLang.yac"  */
    {
		System.out.println("Rule 20.3: " +
			"expressions: arithmatic_expressions");
		yyval = new EVal();
		((EVal)yyval).place = ((EVal)(yystack.valueAt (1-(1)))).place;
		((EVal)yyval).type = ((EVal)(yystack.valueAt (1-(1)))).type;
		((EVal)yyval).nextList = ((EVal)(yystack.valueAt (1-(1)))).nextList;
	};
  break;
    

  case 69:
  if (yyn == 69)
    
/* Line 351 of lalr1.java  */
/* Line 1028 of "SHLang.yac"  */
    {
		System.out.println("Rule 20.4: " +
			"expressions: saved_identifier");
		int index = symbolTable.lookUp(((EVal)(yystack.valueAt (1-(1)))).place);
		if (index == SymbolTable.NOT_IN_SYMBOL_TABLE) {
			System.err.println("Error! \"" + lexIdentifier + "\" is not declared.");
			return YYABORT;
		}
		if (symbolTable.arrays.get(index)) {
			System.err.println("Error! \"" + lexIdentifier + "\" is an array, it can not be used without index.");
			return YYABORT;
		}
		yyval = new EVal();
		((EVal)yyval).place = symbolTable.names.get(index);
		((EVal)yyval).type = symbolTable.types.get(index);
		if(((EVal)yyval).type != EVal.TYPE_CODE_BOOLEAN) {
			// emit(":=", String.valueOf(lexInt), null, ((EVal)$$).place);
		} else {
			((EVal)yyval).trueList = EVal.makeList(nextQuad());
			((EVal)yyval).falseList = EVal.makeList(nextQuad() + 1);

			emit("check", ((EVal)yyval).place, null, String.valueOf(nextQuad() + 2)); // result will be backpatched.
			emit("goto", null, null, String.valueOf(nextQuad() + 1)); // result will be backpatched.
		}
	};
  break;
    

  case 70:
  if (yyn == 70)
    
/* Line 351 of lalr1.java  */
/* Line 1053 of "SHLang.yac"  */
    {
		System.out.println("Rule 20.4: " +
			"expressions: saved_identifier LB_KW arithmatic_expressions RB_KW");
		int index = symbolTable.lookUp(((EVal)(yystack.valueAt (4-(1)))).place);
		if (index == SymbolTable.NOT_IN_SYMBOL_TABLE) {
			System.err.println("Error! \"" + lexIdentifier + "\" is not declared.");
			return YYABORT;
		}
		if (!symbolTable.arrays.get(index)) {
			System.err.println("Error! \"" + lexIdentifier + "\" is not an array, it can not be used with index.");
			return YYABORT;
		}
		yyval = new EVal();
		((EVal)yyval).place = newTemp(symbolTable.types.get(index), false);
		((EVal)yyval).type = symbolTable.types.get(index);
		EVal.arrayIndexOutOfBoundList.add(nextQuad() + 2);
		EVal.arrayIndexOutOfBoundList.add(nextQuad() + 4);
		emit("-", ((EVal)(yystack.valueAt (4-(3)))).place, startStr + ((EVal)(yystack.valueAt (4-(1)))).place, indexStr + ((EVal)(yystack.valueAt (4-(1)))).place);
		emit(">=", indexStr + ((EVal)(yystack.valueAt (4-(1)))).place, sizeStr + ((EVal)(yystack.valueAt (4-(1)))).place, condStr + ((EVal)(yystack.valueAt (4-(1)))).place);
		emit("check", condStr + ((EVal)(yystack.valueAt (4-(1)))).place, null, String.valueOf(nextQuad() + 3)); // Result will be backpatched.
		emit("<", indexStr + ((EVal)(yystack.valueAt (4-(1)))).place, "0", condStr + ((EVal)(yystack.valueAt (4-(1)))).place);
		emit("check", condStr + ((EVal)(yystack.valueAt (4-(1)))).place, null, String.valueOf(nextQuad() + 1)); // Result will be backpatched.
		if(((EVal)(yystack.valueAt (4-(3)))).type != EVal.TYPE_CODE_BOOLEAN) {
			emit("=[]", ((EVal)(yystack.valueAt (4-(1)))).place, indexStr + ((EVal)(yystack.valueAt (4-(1)))).place, ((EVal)yyval).place);
		} else {
			((EVal)yyval).trueList = EVal.makeList(nextQuad());
			((EVal)yyval).falseList = EVal.makeList(nextQuad() + 1);

			emit("checkarr", ((EVal)(yystack.valueAt (4-(1)))).place, indexStr + ((EVal)(yystack.valueAt (4-(1)))).place, String.valueOf(nextQuad() + 2)); // result will be backpatched.
			emit("goto", null, null, String.valueOf(nextQuad() + 1)); //result will be backpatched.
		}
	};
  break;
    

  case 71:
  if (yyn == 71)
    
/* Line 351 of lalr1.java  */
/* Line 1085 of "SHLang.yac"  */
    {
		System.out.println("Rule 20.5: " +
			"expressions: LP_KW expressions RP_KW");
		yyval = new EVal();
		((EVal)yyval).place = ((EVal)(yystack.valueAt (3-(2)))).place;
		((EVal)yyval).type = ((EVal)(yystack.valueAt (3-(2)))).type;
		((EVal)yyval).nextList = ((EVal)(yystack.valueAt (3-(2)))).nextList;
		((EVal)yyval).trueList = ((EVal)(yystack.valueAt (3-(2)))).trueList;
		((EVal)yyval).falseList = ((EVal)(yystack.valueAt (3-(2)))).falseList;
	};
  break;
    

  case 72:
  if (yyn == 72)
    
/* Line 351 of lalr1.java  */
/* Line 1097 of "SHLang.yac"  */
    {
		System.out.println("Rule 21.1: " +
			"constant_expressions: saved_integer");
		yyval = new EVal();
		((EVal)yyval).place = ((EVal)(yystack.valueAt (1-(1)))).place;
		((EVal)yyval).type = ((EVal)(yystack.valueAt (1-(1)))).type;
		((EVal)yyval).nextList = ((EVal)(yystack.valueAt (1-(1)))).nextList;
	};
  break;
    

  case 73:
  if (yyn == 73)
    
/* Line 351 of lalr1.java  */
/* Line 1105 of "SHLang.yac"  */
    {
		System.out.println("Rule 21.2: " +
			"constant_expressions: saved_real");
		yyval = new EVal();
		((EVal)yyval).place = ((EVal)(yystack.valueAt (1-(1)))).place;
		((EVal)yyval).type = ((EVal)(yystack.valueAt (1-(1)))).type;
		((EVal)yyval).nextList = ((EVal)(yystack.valueAt (1-(1)))).nextList;
	};
  break;
    

  case 74:
  if (yyn == 74)
    
/* Line 351 of lalr1.java  */
/* Line 1113 of "SHLang.yac"  */
    {
		System.out.println("Rule 21.3: " +
			"constant_expressions: saved_char");
		yyval = new EVal();
		((EVal)yyval).place = ((EVal)(yystack.valueAt (1-(1)))).place;
		((EVal)yyval).type = ((EVal)(yystack.valueAt (1-(1)))).type;
		((EVal)yyval).nextList = ((EVal)(yystack.valueAt (1-(1)))).nextList;
	};
  break;
    

  case 75:
  if (yyn == 75)
    
/* Line 351 of lalr1.java  */
/* Line 1121 of "SHLang.yac"  */
    {
		System.out.println("Rule 21.4: " +
			"constant_expressions: saved_boolean");
		yyval = new EVal();
		((EVal)yyval).place = ((EVal)(yystack.valueAt (1-(1)))).place;
		((EVal)yyval).type = ((EVal)(yystack.valueAt (1-(1)))).type;
		((EVal)yyval).trueList = ((EVal)(yystack.valueAt (1-(1)))).trueList;
		((EVal)yyval).falseList = ((EVal)(yystack.valueAt (1-(1)))).falseList;
	};
  break;
    

  case 76:
  if (yyn == 76)
    
/* Line 351 of lalr1.java  */
/* Line 1132 of "SHLang.yac"  */
    {
		System.out.println("Rule 22.1: " +
			"bool_expressions: expressions LT_KW expressions");
		yyval = new EVal();
		((EVal)yyval).place = newTemp(EVal.TYPE_CODE_BOOLEAN, false);
		((EVal)yyval).type = EVal.TYPE_CODE_BOOLEAN;
		((EVal)yyval).trueList = EVal.makeList(nextQuad() + 1);
		((EVal)yyval).falseList = EVal.makeList(nextQuad() + 2);

		emit("<", ((EVal)(yystack.valueAt (3-(1)))).place, ((EVal)(yystack.valueAt (3-(3)))).place, ((EVal)yyval).place);
		emit("check", ((EVal)yyval).place, null, String.valueOf(nextQuad() + 2)); // result will be backpatched.
		emit("goto", null, null, String.valueOf(nextQuad() + 1)); // result will be backpatched.
	};
  break;
    

  case 77:
  if (yyn == 77)
    
/* Line 351 of lalr1.java  */
/* Line 1145 of "SHLang.yac"  */
    {
		System.out.println("Rule 22.2: " +
			"bool_expressions: expressions LE_KW expressions");
		yyval = new EVal();
		((EVal)yyval).place = newTemp(EVal.TYPE_CODE_BOOLEAN, false);
		((EVal)yyval).type = EVal.TYPE_CODE_BOOLEAN;
		((EVal)yyval).trueList = EVal.makeList(nextQuad() + 1);
		((EVal)yyval).falseList = EVal.makeList(nextQuad() + 2);

		emit("<=", ((EVal)(yystack.valueAt (3-(1)))).place, ((EVal)(yystack.valueAt (3-(3)))).place, ((EVal)yyval).place);
		emit("check", ((EVal)yyval).place, null, String.valueOf(nextQuad() + 2)); // result will be backpatched.
		emit("goto", null, null, String.valueOf(nextQuad() + 1)); // result will be backpatched.
	};
  break;
    

  case 78:
  if (yyn == 78)
    
/* Line 351 of lalr1.java  */
/* Line 1158 of "SHLang.yac"  */
    {
		System.out.println("Rule 22.3: " +
			"bool_expressions: expressions GT_KW expressions");
		yyval = new EVal();
		((EVal)yyval).place = newTemp(EVal.TYPE_CODE_BOOLEAN, false);
		((EVal)yyval).type = EVal.TYPE_CODE_BOOLEAN;
		((EVal)yyval).trueList = EVal.makeList(nextQuad() + 1);
		((EVal)yyval).falseList = EVal.makeList(nextQuad() + 2);

		emit(">", ((EVal)(yystack.valueAt (3-(1)))).place, ((EVal)(yystack.valueAt (3-(3)))).place, ((EVal)yyval).place);
		emit("check", ((EVal)yyval).place, null, String.valueOf(nextQuad() + 2)); // result will be backpatched.
		emit("goto", null, null, String.valueOf(nextQuad() + 1)); // result will be backpatched.
	};
  break;
    

  case 79:
  if (yyn == 79)
    
/* Line 351 of lalr1.java  */
/* Line 1171 of "SHLang.yac"  */
    {
		System.out.println("Rule 22.4: " +
			"bool_expressions: expressions GE_KW expressions");
		yyval = new EVal();
		((EVal)yyval).place = newTemp(EVal.TYPE_CODE_BOOLEAN, false);
		((EVal)yyval).type = EVal.TYPE_CODE_BOOLEAN;
		((EVal)yyval).trueList = EVal.makeList(nextQuad() + 1);
		((EVal)yyval).falseList = EVal.makeList(nextQuad() + 2);

		emit(">=", ((EVal)(yystack.valueAt (3-(1)))).place, ((EVal)(yystack.valueAt (3-(3)))).place, ((EVal)yyval).place);
		emit("check", ((EVal)yyval).place, null, String.valueOf(nextQuad() + 2)); // result will be backpatched.
		emit("goto", null, null, String.valueOf(nextQuad() + 1)); // result will be backpatched.
	};
  break;
    

  case 80:
  if (yyn == 80)
    
/* Line 351 of lalr1.java  */
/* Line 1184 of "SHLang.yac"  */
    {
		System.out.println("Rule 22.5: " +
			"bool_expressions: expressions EQ_KW expressions");
		yyval = new EVal();
		((EVal)yyval).place = newTemp(EVal.TYPE_CODE_BOOLEAN, false);
		((EVal)yyval).type = EVal.TYPE_CODE_BOOLEAN;
		((EVal)yyval).trueList = EVal.makeList(nextQuad() + 1);
		((EVal)yyval).falseList = EVal.makeList(nextQuad() + 2);

		emit("=", ((EVal)(yystack.valueAt (3-(1)))).place, ((EVal)(yystack.valueAt (3-(3)))).place, ((EVal)yyval).place);
		emit("check", ((EVal)yyval).place, null, String.valueOf(nextQuad() + 2)); // result will be backpatched.
		emit("goto", null, null, String.valueOf(nextQuad() + 1)); // result will be backpatched.
	};
  break;
    

  case 81:
  if (yyn == 81)
    
/* Line 351 of lalr1.java  */
/* Line 1197 of "SHLang.yac"  */
    {
		System.out.println("Rule 22.6: " +
			"bool_expressions: expressions NE_KW expressions");
		yyval = new EVal();
		((EVal)yyval).place = newTemp(EVal.TYPE_CODE_BOOLEAN, false);
		((EVal)yyval).type = EVal.TYPE_CODE_BOOLEAN;
		((EVal)yyval).trueList = EVal.makeList(nextQuad() + 1);
		((EVal)yyval).falseList = EVal.makeList(nextQuad() + 2);

		emit("<>", ((EVal)(yystack.valueAt (3-(1)))).place, ((EVal)(yystack.valueAt (3-(3)))).place, ((EVal)yyval).place);
		emit("check", ((EVal)yyval).place, null, String.valueOf(nextQuad() + 2)); // result will be backpatched.
		emit("goto", null, null, String.valueOf(nextQuad() + 1)); // result will be backpatched.
	};
  break;
    

  case 82:
  if (yyn == 82)
    
/* Line 351 of lalr1.java  */
/* Line 1210 of "SHLang.yac"  */
    {
		System.out.println("Rule 22.7: " +
			"bool_expressions: expressions AND_KW expressions");
		yyval = new EVal();
		((EVal)yyval).place = newTemp(EVal.TYPE_CODE_BOOLEAN, false);
		((EVal)yyval).type = EVal.TYPE_CODE_BOOLEAN;
		backpatch(((EVal)(yystack.valueAt (4-(1)))).trueList, ((EVal)(yystack.valueAt (4-(3)))).quad);
		((EVal)yyval).trueList = ((EVal)(yystack.valueAt (4-(4)))).trueList;
		((EVal)yyval).falseList = EVal.merge(((EVal)(yystack.valueAt (4-(1)))).falseList, ((EVal)(yystack.valueAt (4-(4)))).falseList);
	};
  break;
    

  case 83:
  if (yyn == 83)
    
/* Line 351 of lalr1.java  */
/* Line 1220 of "SHLang.yac"  */
    {
		System.out.println("Rule 22.8: " +
			"bool_expressions: expressions OR_KW expressions");
		yyval = new EVal();
		((EVal)yyval).place = newTemp(EVal.TYPE_CODE_BOOLEAN, false);
		((EVal)yyval).type = EVal.TYPE_CODE_BOOLEAN;
		backpatch(((EVal)(yystack.valueAt (4-(1)))).falseList, ((EVal)(yystack.valueAt (4-(3)))).quad);
		((EVal)yyval).trueList = EVal.merge(((EVal)(yystack.valueAt (4-(1)))).trueList, ((EVal)(yystack.valueAt (4-(4)))).trueList);
		((EVal)yyval).falseList = ((EVal)(yystack.valueAt (4-(4)))).falseList;
	};
  break;
    

  case 84:
  if (yyn == 84)
    
/* Line 351 of lalr1.java  */
/* Line 1230 of "SHLang.yac"  */
    {
		System.out.println("Rule 22.9: " +
			"bool_expressions: expressions AND_THEN_KW expressions");
		yyval = new EVal();
		((EVal)yyval).place = newTemp(EVal.TYPE_CODE_BOOLEAN, false);
		((EVal)yyval).type = EVal.TYPE_CODE_BOOLEAN;
		
		backpatch(((EVal)(yystack.valueAt (4-(1)))).trueList, nextQuad());
		emit(":=", "1", null, ((EVal)yyval).place);
		emit("goto", null, null, String.valueOf(((EVal)(yystack.valueAt (4-(3)))).quad));
		backpatch(((EVal)(yystack.valueAt (4-(1)))).falseList, nextQuad());
		emit(":=", "0", null, ((EVal)yyval).place);
		emit("goto", null, null, String.valueOf(((EVal)(yystack.valueAt (4-(3)))).quad));
		backpatch(((EVal)(yystack.valueAt (4-(4)))).trueList, nextQuad());
		backpatch(((EVal)(yystack.valueAt (4-(4)))).falseList, nextQuad());
		emit("*", ((EVal)yyval).place, ((EVal)(yystack.valueAt (4-(4)))).place, ((EVal)yyval).place);
		((EVal)yyval).trueList = EVal.makeList(nextQuad());
		((EVal)yyval).falseList = EVal.makeList(nextQuad() + 1);
		emit("check", ((EVal)yyval).place, null, String.valueOf(nextQuad() + 2));// result will be backpatched
		emit("goto", null, null, String.valueOf(nextQuad() + 1));// result will be backpatched
	};
  break;
    

  case 85:
  if (yyn == 85)
    
/* Line 351 of lalr1.java  */
/* Line 1251 of "SHLang.yac"  */
    {
		System.out.println("Rule 22.10: " +
			"bool_expressions: expressions OR_ELSE_KW expressions");
		yyval = new EVal();
		((EVal)yyval).place = newTemp(EVal.TYPE_CODE_BOOLEAN, false);
		((EVal)yyval).type = EVal.TYPE_CODE_BOOLEAN;
		
		backpatch(((EVal)(yystack.valueAt (4-(1)))).trueList, nextQuad());
		emit(":=", "1", null, ((EVal)yyval).place);
		emit("goto", null, null, String.valueOf(((EVal)(yystack.valueAt (4-(3)))).quad));
		backpatch(((EVal)(yystack.valueAt (4-(1)))).falseList, nextQuad());
		emit(":=", "0", null, ((EVal)yyval).place);
		emit("goto", null, null, String.valueOf(((EVal)(yystack.valueAt (4-(3)))).quad));
		backpatch(((EVal)(yystack.valueAt (4-(4)))).trueList, nextQuad());
		backpatch(((EVal)(yystack.valueAt (4-(4)))).falseList, nextQuad());
		emit("+", ((EVal)yyval).place, ((EVal)(yystack.valueAt (4-(4)))).place, ((EVal)yyval).place);
		((EVal)yyval).trueList = EVal.makeList(nextQuad());
		((EVal)yyval).falseList = EVal.makeList(nextQuad() + 1);
		emit("check", ((EVal)yyval).place, null, String.valueOf(nextQuad() + 2));
		emit("goto", null, null, String.valueOf(nextQuad() + 1));
	};
  break;
    

  case 86:
  if (yyn == 86)
    
/* Line 351 of lalr1.java  */
/* Line 1272 of "SHLang.yac"  */
    {
		System.out.println("Rule 22.11: " +
			"bool_expressions: expressions NOT_KW expressions");
		yyval = new EVal();
		((EVal)yyval).place = newTemp(EVal.TYPE_CODE_BOOLEAN, false);
		((EVal)yyval).type = EVal.TYPE_CODE_BOOLEAN;
		((EVal)yyval).trueList = ((EVal)(yystack.valueAt (2-(2)))).falseList;
		((EVal)yyval).falseList = ((EVal)(yystack.valueAt (2-(2)))).trueList;
	};
  break;
    

  case 87:
  if (yyn == 87)
    
/* Line 351 of lalr1.java  */
/* Line 1283 of "SHLang.yac"  */
    {
		System.out.println("Rule 23.1: " +
			"arithmatic_expressions: expressions ADD_KW expressions");
		if((((EVal)(yystack.valueAt (3-(1)))).type == EVal.TYPE_CODE_INTEGER && ((EVal)(yystack.valueAt (3-(3)))).type == EVal.TYPE_CODE_INTEGER)
			|| (((EVal)(yystack.valueAt (3-(1)))).type == EVal.TYPE_CODE_REAL && ((EVal)(yystack.valueAt (3-(3)))).type == EVal.TYPE_CODE_REAL)
			|| (((EVal)(yystack.valueAt (3-(1)))).type == EVal.TYPE_CODE_CHAR && ((EVal)(yystack.valueAt (3-(3)))).type == EVal.TYPE_CODE_CHAR)){
			yyval = new EVal();
			((EVal)yyval).place = newTemp(((EVal)(yystack.valueAt (3-(1)))).type, false);
			((EVal)yyval).type = ((EVal)(yystack.valueAt (3-(1)))).type;
			emit("+", ((EVal)(yystack.valueAt (3-(1)))).place, ((EVal)(yystack.valueAt (3-(3)))).place, ((EVal)yyval).place);
		}
	};
  break;
    

  case 88:
  if (yyn == 88)
    
/* Line 351 of lalr1.java  */
/* Line 1295 of "SHLang.yac"  */
    {
		System.out.println("Rule 23.2: " +
			"arithmatic_expressions: expressions SUB_KW expressions");
		if((((EVal)(yystack.valueAt (3-(1)))).type == EVal.TYPE_CODE_INTEGER && ((EVal)(yystack.valueAt (3-(3)))).type == EVal.TYPE_CODE_INTEGER)
			|| (((EVal)(yystack.valueAt (3-(1)))).type == EVal.TYPE_CODE_REAL && ((EVal)(yystack.valueAt (3-(3)))).type == EVal.TYPE_CODE_REAL)
			|| (((EVal)(yystack.valueAt (3-(1)))).type == EVal.TYPE_CODE_CHAR && ((EVal)(yystack.valueAt (3-(3)))).type == EVal.TYPE_CODE_CHAR)){
			yyval = new EVal();
			((EVal)yyval).place = newTemp(((EVal)(yystack.valueAt (3-(1)))).type, false);
			((EVal)yyval).type = ((EVal)(yystack.valueAt (3-(1)))).type;
			emit("-", ((EVal)(yystack.valueAt (3-(1)))).place, ((EVal)(yystack.valueAt (3-(3)))).place, ((EVal)yyval).place);
		}
	};
  break;
    

  case 89:
  if (yyn == 89)
    
/* Line 351 of lalr1.java  */
/* Line 1307 of "SHLang.yac"  */
    {
		System.out.println("Rule 23.3: " +
			"arithmatic_expressions: expressions MUL_KW expressions");
		if((((EVal)(yystack.valueAt (3-(1)))).type == EVal.TYPE_CODE_INTEGER && ((EVal)(yystack.valueAt (3-(3)))).type == EVal.TYPE_CODE_INTEGER)
			|| (((EVal)(yystack.valueAt (3-(1)))).type == EVal.TYPE_CODE_REAL && ((EVal)(yystack.valueAt (3-(3)))).type == EVal.TYPE_CODE_REAL)){
			yyval = new EVal();
			((EVal)yyval).place = newTemp(((EVal)(yystack.valueAt (3-(1)))).type, false);
			((EVal)yyval).type = ((EVal)(yystack.valueAt (3-(1)))).type;
			emit("*", ((EVal)(yystack.valueAt (3-(1)))).place, ((EVal)(yystack.valueAt (3-(3)))).place, ((EVal)yyval).place);
		}
	};
  break;
    

  case 90:
  if (yyn == 90)
    
/* Line 351 of lalr1.java  */
/* Line 1318 of "SHLang.yac"  */
    {
		System.out.println("Rule 23.3: " +
			"arithmatic_expressions: expressions DIV_KW expressions");
		if((((EVal)(yystack.valueAt (3-(1)))).type == EVal.TYPE_CODE_INTEGER && ((EVal)(yystack.valueAt (3-(3)))).type == EVal.TYPE_CODE_INTEGER)
			|| (((EVal)(yystack.valueAt (3-(1)))).type == EVal.TYPE_CODE_REAL && ((EVal)(yystack.valueAt (3-(3)))).type == EVal.TYPE_CODE_REAL)){
			yyval = new EVal();
			((EVal)yyval).place = newTemp(((EVal)(yystack.valueAt (3-(1)))).type, false);
			((EVal)yyval).type = ((EVal)(yystack.valueAt (3-(1)))).type;
			emit("/", ((EVal)(yystack.valueAt (3-(1)))).place, ((EVal)(yystack.valueAt (3-(3)))).place, ((EVal)yyval).place);
		}
	};
  break;
    

  case 91:
  if (yyn == 91)
    
/* Line 351 of lalr1.java  */
/* Line 1329 of "SHLang.yac"  */
    {
		System.out.println("Rule 23.5: " +
			"arithmatic_expressions: expressions MOD_KW expressions");
		if((((EVal)(yystack.valueAt (3-(1)))).type == EVal.TYPE_CODE_INTEGER && ((EVal)(yystack.valueAt (3-(3)))).type == EVal.TYPE_CODE_INTEGER)
			|| (((EVal)(yystack.valueAt (3-(1)))).type == EVal.TYPE_CODE_REAL && ((EVal)(yystack.valueAt (3-(3)))).type == EVal.TYPE_CODE_REAL)){
			yyval = new EVal();
			((EVal)yyval).place = newTemp(((EVal)(yystack.valueAt (3-(1)))).type, false);
			((EVal)yyval).type = ((EVal)(yystack.valueAt (3-(1)))).type;
			emit("%", ((EVal)(yystack.valueAt (3-(1)))).place, ((EVal)(yystack.valueAt (3-(3)))).place, ((EVal)yyval).place);
		}
	};
  break;
    

  case 92:
  if (yyn == 92)
    
/* Line 351 of lalr1.java  */
/* Line 1340 of "SHLang.yac"  */
    {
		System.out.println("Rule 23.6: " +
			"arithmatic_expressions: SUB_KW expressions");
		if(((EVal)(yystack.valueAt (2-(2)))).type == EVal.TYPE_CODE_INTEGER || ((EVal)(yystack.valueAt (2-(2)))).type == EVal.TYPE_CODE_REAL){
			yyval = new EVal();
			((EVal)yyval).place = newTemp(((EVal)(yystack.valueAt (2-(2)))).type, false);
			((EVal)yyval).type = ((EVal)(yystack.valueAt (2-(2)))).type;
			emit("usub", ((EVal)(yystack.valueAt (2-(2)))).place, null, ((EVal)yyval).place);
		}
	};
  break;
    

  case 93:
  if (yyn == 93)
    
/* Line 351 of lalr1.java  */
/* Line 1352 of "SHLang.yac"  */
    {
		System.out.println("Rule 24: " +
			"saved_identifier: IDENTIFIER");
		yyval = new EVal();
		((EVal)yyval).place = lexIdentifier;
	};
  break;
    

  case 94:
  if (yyn == 94)
    
/* Line 351 of lalr1.java  */
/* Line 1360 of "SHLang.yac"  */
    {
		System.out.println("Rule 25: " +
			"saved_integer: INTEGER_CONSTANT");
		yyval = new EVal();
		((EVal)yyval).place = newTemp(EVal.TYPE_CODE_INTEGER, false);
		((EVal)yyval).type = EVal.TYPE_CODE_INTEGER;
		((EVal)yyval).nextList = EVal.makeList(nextQuad() + 1);

		emit(":=", String.valueOf(lexInt), null, ((EVal)yyval).place);
	};
  break;
    

  case 95:
  if (yyn == 95)
    
/* Line 351 of lalr1.java  */
/* Line 1372 of "SHLang.yac"  */
    {
		System.out.println("Rule 25: " +
			"saved_real: REAL_CONSTANT");
		yyval = new EVal();
		((EVal)yyval).place = newTemp(EVal.TYPE_CODE_REAL, false);
		((EVal)yyval).type = EVal.TYPE_CODE_REAL;
		((EVal)yyval).nextList = EVal.makeList(nextQuad() + 1);

		emit(":=", String.valueOf(lexReal), null, ((EVal)yyval).place);
	};
  break;
    

  case 96:
  if (yyn == 96)
    
/* Line 351 of lalr1.java  */
/* Line 1384 of "SHLang.yac"  */
    {
		System.out.println("Rule 25: " +
			"saved_char: CHAR_CONSTANT");
		yyval = new EVal();
		((EVal)yyval).place = newTemp(EVal.TYPE_CODE_CHAR, false);
		((EVal)yyval).type = EVal.TYPE_CODE_CHAR;
		((EVal)yyval).nextList = EVal.makeList(nextQuad() + 1);

		emit(":=", "'" + String.valueOf(lexChar) + "'", null, ((EVal)yyval).place);
	};
  break;
    

  case 97:
  if (yyn == 97)
    
/* Line 351 of lalr1.java  */
/* Line 1396 of "SHLang.yac"  */
    {
		System.out.println("Rule 25: " +
			"saved_boolean: BOOLEAN_CONSTANT");
		yyval = new EVal();
		((EVal)yyval).place = newTemp(EVal.TYPE_CODE_BOOLEAN, false);
		((EVal)yyval).type = EVal.TYPE_CODE_BOOLEAN;
		((EVal)yyval).trueList = EVal.makeList(nextQuad() + 1);
		((EVal)yyval).falseList = EVal.makeList(nextQuad() + 2);

		if(lexBoolean)
			emit(":=", "1", null, ((EVal)yyval).place);
		else
			emit(":=", "0", null, ((EVal)yyval).place);
		emit("check", ((EVal)yyval).place, null, String.valueOf(nextQuad() + 2)); // result will be backpatched.
		emit("goto", null, null, String.valueOf(nextQuad() + 1)); // result will be backpatched.
	};
  break;
    

  case 98:
  if (yyn == 98)
    
/* Line 351 of lalr1.java  */
/* Line 1414 of "SHLang.yac"  */
    {
		yyval = new EVal();
		((EVal)yyval).quad = nextQuad();
	};
  break;
    

  case 99:
  if (yyn == 99)
    
/* Line 351 of lalr1.java  */
/* Line 1420 of "SHLang.yac"  */
    {
		yyval = new EVal();
		((EVal)yyval).nextList = EVal.makeList(nextQuad());
		emit("goto", null, null, String.valueOf(nextQuad() + 1)); // result will be backpatched.
	};
  break;
    



/* Line 351 of lalr1.java  */
/* Line 2341 of "SHLang.cac"  */
	default: break;
      }

    yy_symbol_print ("-> $$ =", yyr1_[yyn], yyval);

    yystack.pop (yylen);
    yylen = 0;

    /* Shift the result of the reduction.  */
    yyn = yyr1_[yyn];
    int yystate = yypgoto_[yyn - yyntokens_] + yystack.stateAt (0);
    if (0 <= yystate && yystate <= yylast_
	&& yycheck_[yystate] == yystack.stateAt (0))
      yystate = yytable_[yystate];
    else
      yystate = yydefgoto_[yyn - yyntokens_];

    yystack.push (yystate, yyval);
    return YYNEWSTATE;
  }

  /* Return YYSTR after stripping away unnecessary quotes and
     backslashes, so that it's suitable for yyerror.  The heuristic is
     that double-quoting is unnecessary unless the string contains an
     apostrophe, a comma, or backslash (other than backslash-backslash).
     YYSTR is taken from yytname.  */
  private final String yytnamerr_ (String yystr)
  {
    if (yystr.charAt (0) == '"')
      {
        StringBuffer yyr = new StringBuffer ();
        strip_quotes: for (int i = 1; i < yystr.length (); i++)
          switch (yystr.charAt (i))
            {
            case '\'':
            case ',':
              break strip_quotes;

            case '\\':
	      if (yystr.charAt(++i) != '\\')
                break strip_quotes;
              /* Fall through.  */
            default:
              yyr.append (yystr.charAt (i));
              break;

            case '"':
              return yyr.toString ();
            }
      }
    else if (yystr.equals ("$end"))
      return "end of input";

    return yystr;
  }

  /*--------------------------------.
  | Print this symbol on YYOUTPUT.  |
  `--------------------------------*/

  private void yy_symbol_print (String s, int yytype,
			         Object yyvaluep				 )
  {
    if (yydebug > 0)
    yycdebug (s + (yytype < yyntokens_ ? " token " : " nterm ")
	      + yytname_[yytype] + " ("
	      + (yyvaluep == null ? "(null)" : yyvaluep.toString ()) + ")");
  }

  /**
   * Parse input from the scanner that was specified at object construction
   * time.  Return whether the end of the input was reached successfully.
   *
   * @return <tt>true</tt> if the parsing succeeds.  Note that this does not
   *          imply that there were no syntax errors.
   */
  public boolean parse () throws java.io.IOException
  {
    /// Lookahead and lookahead in internal form.
    int yychar = yyempty_;
    int yytoken = 0;

    /* State.  */
    int yyn = 0;
    int yylen = 0;
    int yystate = 0;

    YYStack yystack = new YYStack ();

    /* Error handling.  */
    int yynerrs_ = 0;
    

    /// Semantic value of the lookahead.
    Object yylval = null;

    int yyresult;

    yycdebug ("Starting parse\n");
    yyerrstatus_ = 0;


    /* Initialize the stack.  */
    yystack.push (yystate, yylval);

    int label = YYNEWSTATE;
    for (;;)
      switch (label)
      {
        /* New state.  Unlike in the C/C++ skeletons, the state is already
	   pushed when we come here.  */
      case YYNEWSTATE:
        yycdebug ("Entering state " + yystate + "\n");
        if (yydebug > 0)
          yystack.print (yyDebugStream);

        /* Accept?  */
        if (yystate == yyfinal_)
          return true;

        /* Take a decision.  First try without lookahead.  */
        yyn = yypact_[yystate];
        if (yy_pact_value_is_default_ (yyn))
          {
            label = YYDEFAULT;
	    break;
          }

        /* Read a lookahead token.  */
        if (yychar == yyempty_)
          {
	    yycdebug ("Reading a token: ");
	    yychar = yylex ();
            
            yylval = yylexer.getLVal ();
          }

        /* Convert token to internal form.  */
        if (yychar <= EOF)
          {
	    yychar = yytoken = EOF;
	    yycdebug ("Now at end of input.\n");
          }
        else
          {
	    yytoken = yytranslate_ (yychar);
	    yy_symbol_print ("Next token is", yytoken,
			     yylval);
          }

        /* If the proper action on seeing token YYTOKEN is to reduce or to
           detect an error, take that action.  */
        yyn += yytoken;
        if (yyn < 0 || yylast_ < yyn || yycheck_[yyn] != yytoken)
          label = YYDEFAULT;

        /* <= 0 means reduce or error.  */
        else if ((yyn = yytable_[yyn]) <= 0)
          {
	    if (yy_table_value_is_error_ (yyn))
	      label = YYERRLAB;
	    else
	      {
	        yyn = -yyn;
	        label = YYREDUCE;
	      }
          }

        else
          {
            /* Shift the lookahead token.  */
	    yy_symbol_print ("Shifting", yytoken,
			     yylval);

            /* Discard the token being shifted.  */
            yychar = yyempty_;

            /* Count tokens shifted since error; after three, turn off error
               status.  */
            if (yyerrstatus_ > 0)
              --yyerrstatus_;

            yystate = yyn;
            yystack.push (yystate, yylval);
            label = YYNEWSTATE;
          }
        break;

      /*-----------------------------------------------------------.
      | yydefault -- do the default action for the current state.  |
      `-----------------------------------------------------------*/
      case YYDEFAULT:
        yyn = yydefact_[yystate];
        if (yyn == 0)
          label = YYERRLAB;
        else
          label = YYREDUCE;
        break;

      /*-----------------------------.
      | yyreduce -- Do a reduction.  |
      `-----------------------------*/
      case YYREDUCE:
        yylen = yyr2_[yyn];
        label = yyaction (yyn, yystack, yylen);
	yystate = yystack.stateAt (0);
        break;

      /*------------------------------------.
      | yyerrlab -- here on detecting error |
      `------------------------------------*/
      case YYERRLAB:
        /* If not already recovering from an error, report this error.  */
        if (yyerrstatus_ == 0)
          {
            ++yynerrs_;
            if (yychar == yyempty_)
              yytoken = yyempty_;
            yyerror (yysyntax_error (yystate, yytoken));
          }

        
        if (yyerrstatus_ == 3)
          {
	    /* If just tried and failed to reuse lookahead token after an
	     error, discard it.  */

	    if (yychar <= EOF)
	      {
	      /* Return failure if at end of input.  */
	      if (yychar == EOF)
	        return false;
	      }
	    else
	      yychar = yyempty_;
          }

        /* Else will try to reuse lookahead token after shifting the error
           token.  */
        label = YYERRLAB1;
        break;

      /*---------------------------------------------------.
      | errorlab -- error raised explicitly by YYERROR.  |
      `---------------------------------------------------*/
      case YYERROR:

        
        /* Do not reclaim the symbols of the rule which action triggered
           this YYERROR.  */
        yystack.pop (yylen);
        yylen = 0;
        yystate = yystack.stateAt (0);
        label = YYERRLAB1;
        break;

      /*-------------------------------------------------------------.
      | yyerrlab1 -- common code for both syntax error and YYERROR.  |
      `-------------------------------------------------------------*/
      case YYERRLAB1:
        yyerrstatus_ = 3;	/* Each real token shifted decrements this.  */

        for (;;)
          {
	    yyn = yypact_[yystate];
	    if (!yy_pact_value_is_default_ (yyn))
	      {
	        yyn += yyterror_;
	        if (0 <= yyn && yyn <= yylast_ && yycheck_[yyn] == yyterror_)
	          {
	            yyn = yytable_[yyn];
	            if (0 < yyn)
		      break;
	          }
	      }

	    /* Pop the current state because it cannot handle the error token.  */
	    if (yystack.height == 1)
	      return false;

	    
	    yystack.pop ();
	    yystate = yystack.stateAt (0);
	    if (yydebug > 0)
	      yystack.print (yyDebugStream);
          }

	

        /* Shift the error token.  */
        yy_symbol_print ("Shifting", yystos_[yyn],
			 yylval);

        yystate = yyn;
	yystack.push (yyn, yylval);
        label = YYNEWSTATE;
        break;

        /* Accept.  */
      case YYACCEPT:
        return true;

        /* Abort.  */
      case YYABORT:
        return false;
      }
  }

  // Generate an error message.
  private String yysyntax_error (int yystate, int tok)
  {
    if (errorVerbose)
      {
        /* There are many possibilities here to consider:
           - Assume YYFAIL is not used.  It's too flawed to consider.
             See
             <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
             for details.  YYERROR is fine as it does not invoke this
             function.
           - If this state is a consistent state with a default action,
             then the only way this function was invoked is if the
             default action is an error action.  In that case, don't
             check for expected tokens because there are none.
           - The only way there can be no lookahead present (in tok) is
             if this state is a consistent state with a default action.
             Thus, detecting the absence of a lookahead is sufficient to
             determine that there is no unexpected or expected token to
             report.  In that case, just report a simple "syntax error".
           - Don't assume there isn't a lookahead just because this
             state is a consistent state with a default action.  There
             might have been a previous inconsistent state, consistent
             state with a non-default action, or user semantic action
             that manipulated yychar.  (However, yychar is currently out
             of scope during semantic actions.)
           - Of course, the expected token list depends on states to
             have correct lookahead information, and it depends on the
             parser not to perform extra reductions after fetching a
             lookahead from the scanner and before detecting a syntax
             error.  Thus, state merging (from LALR or IELR) and default
             reductions corrupt the expected token list.  However, the
             list is correct for canonical LR with one exception: it
             will still contain any token that will not be accepted due
             to an error action in a later state.
        */
        if (tok != yyempty_)
          {
            // FIXME: This method of building the message is not compatible
            // with internationalization.
            StringBuffer res =
              new StringBuffer ("syntax error, unexpected ");
            res.append (yytnamerr_ (yytname_[tok]));
            int yyn = yypact_[yystate];
            if (!yy_pact_value_is_default_ (yyn))
              {
                /* Start YYX at -YYN if negative to avoid negative
                   indexes in YYCHECK.  In other words, skip the first
                   -YYN actions for this state because they are default
                   actions.  */
                int yyxbegin = yyn < 0 ? -yyn : 0;
                /* Stay within bounds of both yycheck and yytname.  */
                int yychecklim = yylast_ - yyn + 1;
                int yyxend = yychecklim < yyntokens_ ? yychecklim : yyntokens_;
                int count = 0;
                for (int x = yyxbegin; x < yyxend; ++x)
                  if (yycheck_[x + yyn] == x && x != yyterror_
                      && !yy_table_value_is_error_ (yytable_[x + yyn]))
                    ++count;
                if (count < 5)
                  {
                    count = 0;
                    for (int x = yyxbegin; x < yyxend; ++x)
                      if (yycheck_[x + yyn] == x && x != yyterror_
                          && !yy_table_value_is_error_ (yytable_[x + yyn]))
                        {
                          res.append (count++ == 0 ? ", expecting " : " or ");
                          res.append (yytnamerr_ (yytname_[x]));
                        }
                  }
              }
            return res.toString ();
          }
      }

    return "syntax error";
  }

  /**
   * Whether the given <code>yypact_</code> value indicates a defaulted state.
   * @param yyvalue   the value to check
   */
  private static boolean yy_pact_value_is_default_ (int yyvalue)
  {
    return yyvalue == yypact_ninf_;
  }

  /**
   * Whether the given <code>yytable_</code> value indicates a syntax error.
   * @param yyvalue   the value to check
   */
  private static boolean yy_table_value_is_error_ (int yyvalue)
  {
    return yyvalue == yytable_ninf_;
  }

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
  private static final short yypact_ninf_ = -152;
  private static final short yypact_[] =
  {
        29,   -10,    65,  -152,   237,  -152,    33,   -10,  -152,  -152,
    -152,  -152,   264,  -152,   -10,    18,  -152,   120,  -152,    42,
      33,  -152,   136,   -10,  -152,    14,    45,    33,  -152,   180,
    -152,   -10,   180,   180,    60,  -152,  -152,  -152,    56,    72,
    -152,  -152,  -152,    64,   160,    91,  -152,    33,  -152,   112,
    -152,    35,   180,  -152,   180,   180,   180,  -152,  -152,  -152,
    -152,   293,  -152,   121,  -152,   100,  -152,  -152,  -152,  -152,
     169,   131,   293,  -152,   293,   115,  -152,  -152,   169,  -152,
     180,   -22,   180,  -152,   190,    20,  -152,  -152,    35,   147,
     127,   147,  -152,    25,   125,   123,    -5,    26,  -152,   212,
    -152,  -152,  -152,  -152,  -152,   180,   180,   180,   180,   180,
     180,   180,   180,   180,   180,   180,  -152,   180,   157,   180,
     155,   180,   145,  -152,   293,  -152,   -10,   142,   239,  -152,
      20,   139,  -152,   147,   148,  -152,   147,   -15,  -152,   107,
    -152,  -152,  -152,   180,   -10,  -152,   128,  -152,   180,   180,
     180,   180,    57,    57,    57,    57,    57,    57,    76,    76,
    -152,  -152,  -152,   169,   266,  -152,  -152,   146,  -152,   191,
     150,  -152,  -152,   161,   149,  -152,   158,    11,  -152,  -152,
    -152,     3,  -152,  -152,   315,   315,   304,   304,  -152,   181,
    -152,   180,   189,   128,  -152,   182,  -152,   194,  -152,   180,
    -152,  -152,   206,    22,  -152,  -152,   128,  -152,  -152,   293,
    -152,    33,   188,  -152,    33,   169,  -152,  -152,   192,  -152,
    -152,  -152,    33,  -152,   196,   197,    33,  -152,  -152,   199,
    -152
  };

  /* YYDEFACT[S] -- default reduction number in state S.  Performed when
     YYTABLE doesn't specify something else to do.  Zero means the
     default is an error.  */
  private static final byte yydefact_[] =
  {
         0,     0,     0,    93,     0,     1,     0,     0,     9,    10,
      11,    12,     0,     7,     0,     0,    34,     0,     5,     0,
       0,     6,     0,     8,    14,     0,    20,     0,    35,     0,
      98,     0,     0,     0,     0,    98,    41,    61,    98,     0,
      45,    46,    48,     0,     0,     0,     4,     0,    13,     0,
      17,     0,     0,     3,     0,     0,     0,    94,    95,    96,
      97,     0,    66,    67,    68,    69,    72,    73,    74,    75,
       0,     0,    99,    67,    59,     0,    42,    40,     0,    98,
       0,     0,     0,    39,     0,     0,     2,    15,     0,     0,
       0,    27,    19,     0,     0,    68,    69,    72,    86,     0,
      92,    98,    98,    98,    98,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    98,     0,     0,     0,
       0,     0,     0,    43,    51,    58,    62,     0,     0,    38,
       0,     0,    16,    27,     0,    26,     0,     0,    18,     0,
      33,    31,    21,     0,     0,    22,     0,    71,     0,     0,
       0,     0,    80,    81,    77,    76,    79,    78,    87,    88,
      89,    90,    91,     0,     0,    98,    99,    72,    98,     0,
      67,    44,    57,     0,     0,    37,     0,     0,    29,    32,
      30,    68,    23,    24,    82,    84,    83,    85,    50,    45,
      70,     0,     0,     0,    98,     0,    56,     0,    60,     0,
      36,    28,     0,    67,    98,    99,     0,    98,    55,    52,
      98,     0,     0,    99,     0,     0,    54,    98,     0,    99,
      47,    49,     0,    98,     0,     0,     0,    65,    63,     0,
      64
  };

  /* YYPGOTO[NTERM-NUM].  */
  private static final short yypgoto_[] =
  {
      -152,  -152,   -29,    -7,  -152,   141,  -152,  -152,   -17,   105,
     143,  -152,    63,  -152,   218,    31,  -152,    -6,  -152,   -60,
    -151,    34,  -152,  -152,  -152,  -152,     5,   -40,   -27,   -44,
       2,   -45,  -152,  -152,  -152,   -34,  -127
  };

  /* YYDEFGOTO[NTERM-NUM].  */
  private static final short
  yydefgoto_[] =
  {
        -1,     2,    12,    13,    14,    23,    48,    24,    25,    94,
      90,   135,    91,    92,    15,    16,    45,    37,    38,    39,
      40,    41,    42,   127,   169,   197,    61,    62,    73,    64,
      65,    66,    67,    68,    69,    70,   120
  };

  /* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule which
     number is the opposite.  If YYTABLE_NINF_, syntax error.  */
  private static final short yytable_ninf_ = -100;
  private static final short
  yytable_[] =
  {
        18,    76,    63,     4,    78,    21,    49,    97,    95,    19,
     118,    93,   189,   125,    46,    84,    26,   141,   122,    43,
     -25,    53,    27,     7,   178,    26,     8,     9,    10,    11,
       3,   117,     1,    71,   -53,   144,   -53,    72,    74,   192,
     -25,    86,     3,   180,    50,   123,    28,    51,   134,   137,
     201,   139,   -53,    28,    96,   140,   130,   141,    17,    98,
      99,   100,   202,   145,   220,     5,   146,   148,   149,   150,
     151,    17,    43,    89,   167,    95,    44,    21,   212,   131,
      43,    52,   163,    26,    75,   124,   218,   128,    57,    58,
      59,    60,   224,   176,   170,    77,   177,    80,    81,   181,
      82,   183,    79,   188,   111,   112,   113,   114,   115,    49,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,    96,   164,    21,   174,   113,   114,   115,    26,    85,
      29,   191,   116,    30,   193,    31,   117,   179,    32,   180,
      47,     7,    33,    34,    87,    88,   182,   119,   205,   121,
      35,   133,   136,   184,   185,   186,   187,   138,    17,    36,
     206,   213,   142,   143,   203,    43,     8,     9,    10,    11,
     211,   165,     3,   214,   168,   171,   215,   172,   175,    29,
     141,    57,    30,   222,    31,   198,   146,    32,   200,   226,
     180,    33,    34,   -99,   199,    83,     8,     9,    10,    11,
      57,    58,    59,    60,   209,   216,   204,    17,   219,    54,
     194,   195,   196,   207,    55,   208,   225,    43,   210,   217,
     229,     3,   126,   223,   166,   129,   227,   228,    56,   230,
      22,   132,     3,    57,    58,    59,    60,   101,   102,   103,
     104,     6,     7,     8,     9,    10,    11,   147,     0,   221,
       0,     0,     0,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   101,   102,   103,   104,    20,     7,
       8,     9,    10,    11,     0,     0,   173,     0,     0,     0,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   101,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,     0,   190,     0,     0,     0,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   101,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   101,
     102,     0,     0,     0,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115
  };

  /* YYCHECK.  */
  private static final short
  yycheck_[] =
  {
         6,    35,    29,     1,    38,    12,    23,    52,    52,     7,
      70,    51,   163,    35,    20,    44,    14,    32,    78,    17,
      17,    27,     4,     5,    39,    23,     6,     7,     8,     9,
      52,    36,     3,    31,    12,    40,    14,    32,    33,   166,
      37,    47,    52,    32,    30,    79,    15,    33,    88,    89,
      39,    91,    30,    22,    52,    30,    85,    32,    38,    54,
      55,    56,   189,    37,   215,     0,    40,   101,   102,   103,
     104,    38,    70,    38,   119,   119,    34,    84,   205,    85,
      78,    36,   116,    81,    24,    80,   213,    82,    53,    54,
      55,    56,   219,   133,   121,    39,   136,    33,    34,   143,
      36,   146,    30,   163,    47,    48,    49,    50,    51,   126,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   119,   117,   130,   130,    49,    50,    51,   126,    38,
      10,   165,    11,    13,   168,    15,    36,    30,    18,    32,
       4,     5,    22,    23,    32,    33,   144,    16,   193,    34,
      30,    88,    89,   148,   149,   150,   151,    30,    38,    39,
     194,   206,    37,    40,   191,   163,     6,     7,     8,     9,
     204,    14,    52,   207,    19,    30,   210,    35,    39,    10,
      32,    53,    13,   217,    15,    35,    40,    18,    39,   223,
      32,    22,    23,    12,    33,    35,     6,     7,     8,     9,
      53,    54,    55,    56,   199,   211,    17,    38,   214,    29,
      19,    20,    21,    31,    34,    21,   222,   215,    12,    31,
     226,    52,    81,    31,   119,    35,    30,    30,    48,    30,
      12,    88,    52,    53,    54,    55,    56,    25,    26,    27,
      28,     4,     5,     6,     7,     8,     9,    35,    -1,   215,
      -1,    -1,    -1,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    25,    26,    27,    28,     4,     5,
       6,     7,     8,     9,    -1,    -1,    37,    -1,    -1,    -1,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    25,    26,    27,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    25,    26,
      27,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,
      26,    -1,    -1,    -1,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51
  };

  /* STOS_[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
  private static final byte
  yystos_[] =
  {
         0,     3,    59,    52,    88,     0,     4,     5,     6,     7,
       8,     9,    60,    61,    62,    72,    73,    38,    75,    88,
       4,    61,    72,    63,    65,    66,    88,     4,    73,    10,
      13,    15,    18,    22,    23,    30,    39,    75,    76,    77,
      78,    79,    80,    88,    34,    74,    75,     4,    64,    66,
      30,    33,    36,    75,    29,    34,    48,    53,    54,    55,
      56,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    88,    84,    86,    84,    24,    93,    39,    93,    30,
      33,    34,    36,    35,    60,    38,    75,    32,    33,    38,
      68,    70,    71,    85,    67,    87,    88,    89,    84,    84,
      84,    25,    26,    27,    28,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    11,    36,    77,    16,
      94,    34,    77,    93,    84,    35,    63,    81,    84,    35,
      60,    75,    68,    70,    85,    69,    70,    85,    30,    85,
      30,    32,    37,    40,    40,    37,    40,    35,    93,    93,
      93,    93,    84,    84,    84,    84,    84,    84,    84,    84,
      84,    84,    84,    93,    84,    14,    67,    89,    19,    82,
      86,    30,    35,    37,    75,    39,    85,    85,    39,    30,
      32,    87,    88,    89,    84,    84,    84,    84,    77,    78,
      37,    93,    94,    93,    19,    20,    21,    83,    35,    33,
      39,    39,    94,    86,    17,    89,    93,    31,    21,    84,
      12,    93,    94,    89,    93,    93,    75,    31,    94,    75,
      78,    79,    93,    31,    94,    75,    93,    30,    30,    75,
      30
  };

  /* TOKEN_NUMBER_[YYLEX-NUM] -- Internal symbol number corresponding
     to YYLEX-NUM.  */
  private static final short
  yytoken_number_[] =
  {
         0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312
  };

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
  private static final byte
  yyr1_[] =
  {
         0,    58,    59,    59,    59,    59,    60,    60,    61,    62,
      62,    62,    62,    63,    63,    64,    64,    65,    65,    65,
      66,    66,    66,    67,    67,    67,    68,    68,    69,    69,
      70,    70,    71,    71,    72,    72,    73,    73,    74,    74,
      75,    75,    76,    76,    76,    77,    77,    78,    78,    79,
      79,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    81,    82,    82,    83,    84,    84,    84,    84,
      84,    84,    85,    85,    85,    85,    86,    86,    86,    86,
      86,    86,    86,    86,    86,    86,    86,    87,    87,    87,
      87,    87,    87,    88,    89,    90,    91,    92,    93,    94
  };

  /* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
  private static final byte
  yyr2_[] =
  {
         0,     2,     6,     5,     5,     4,     2,     1,     2,     1,
       1,     1,     1,     2,     1,     2,     3,     2,     4,     3,
       1,     4,     4,     3,     3,     3,     2,     1,     3,     2,
       3,     2,     3,     2,     1,     2,     7,     6,     3,     2,
       3,     2,     2,     3,     4,     1,     1,     9,     1,     9,
       5,     3,     6,     6,     8,     6,     5,     4,     3,     2,
       5,     1,     1,     8,     9,     6,     1,     1,     1,     1,
       4,     3,     1,     1,     1,     1,     3,     3,     3,     3,
       3,     3,     4,     4,     4,     4,     2,     3,     3,     3,
       3,     3,     2,     1,     1,     1,     1,     1,     0,     0
  };

  /* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
     First, the terminals, then, starting at \a yyntokens_, nonterminals.  */
  private static final String yytname_[] =
  {
    "$end", "error", "$undefined", "PROGRAM_KW", "MAIN_KW", "PROCEDURE_KW",
  "INTEGER_KW", "REAL_KW", "CHAR_KW", "BOOLEAN_KW", "IF_KW", "THEN_KW",
  "ELSE_KW", "DO_KW", "WHILE_KW", "FOR_KW", "IN_KW", "REPEAT_KW",
  "SWITCH_KW", "CASE_KW", "DEFAULT_KW", "END_KW", "RETURN_KW", "EXIT_KW",
  "WHEN_KW", "AND_KW", "AND_THEN_KW", "OR_KW", "OR_ELSE_KW", "NOT_KW",
  "SEMICOLON_KW", "COLON_KW", "COMMA_KW", "ASS_KW", "LP_KW", "RP_KW",
  "LB_KW", "RB_KW", "LCB_KW", "RCB_KW", "TWO_DOTS_KW", "EQ_KW", "NE_KW",
  "LE_KW", "LT_KW", "GE_KW", "GT_KW", "ADD_KW", "SUB_KW", "MUL_KW",
  "DIV_KW", "MOD_KW", "IDENTIFIER", "INTEGER_CONSTANT", "REAL_CONSTANT",
  "CHAR_CONSTANT", "BOOLEAN_CONSTANT", "usub", "$accept", "program",
  "declarations_list", "declarations", "type_specifiers",
  "declarator_list", "declarator", "declarator_end", "dec", "range",
  "initializer", "initializer_list_in_cb", "initializer_list",
  "initializer_end", "procedure_list", "procedure", "parameters", "block",
  "statement_list", "statement", "matched", "unmatched", "other_statement",
  "arguments", "caseelement", "default", "expressions",
  "constant_expressions", "bool_expressions", "arithmatic_expressions",
  "saved_identifier", "saved_integer", "saved_real", "saved_char",
  "saved_boolean", "M", "N", null
  };

  /* YYRHS -- A `-1'-separated list of the rules' RHS.  */
  private static final byte yyrhs_[] =
  {
        59,     0,    -1,     3,    88,    60,    72,     4,    75,    -1,
       3,    88,    72,     4,    75,    -1,     3,    88,    60,     4,
      75,    -1,     3,    88,     4,    75,    -1,    60,    61,    -1,
      61,    -1,    62,    63,    -1,     6,    -1,     7,    -1,     8,
      -1,     9,    -1,    63,    64,    -1,    65,    -1,    66,    32,
      -1,    66,    33,    68,    -1,    66,    30,    -1,    66,    33,
      68,    30,    -1,    66,    33,    71,    -1,    88,    -1,    88,
      36,    67,    37,    -1,    88,    36,    89,    37,    -1,    88,
      40,    88,    -1,    89,    40,    89,    -1,    87,    40,    87,
      -1,    38,    69,    -1,    70,    -1,    70,    85,    39,    -1,
      85,    39,    -1,    70,    85,    32,    -1,    85,    32,    -1,
      70,    85,    30,    -1,    85,    30,    -1,    73,    -1,    72,
      73,    -1,     5,    88,    74,    38,    60,    75,    39,    -1,
       5,    88,    74,    38,    75,    39,    -1,    34,    60,    35,
      -1,    34,    35,    -1,    38,    76,    39,    -1,    38,    39,
      -1,    30,    93,    -1,    77,    30,    93,    -1,    76,    93,
      77,    30,    -1,    78,    -1,    79,    -1,    10,    86,    11,
      93,    78,    94,    12,    93,    78,    -1,    80,    -1,    10,
      86,    11,    93,    78,    94,    12,    93,    79,    -1,    10,
      86,    11,    93,    77,    -1,    88,    33,    84,    -1,    88,
      36,    84,    37,    33,    84,    -1,    13,    93,    77,    14,
      93,    86,    -1,    15,    88,    16,    67,    94,    17,    93,
      75,    -1,    18,    84,    94,    82,    83,    21,    -1,    18,
      84,    94,    82,    21,    -1,    88,    34,    81,    35,    -1,
      88,    34,    35,    -1,    22,    84,    -1,    23,    24,    34,
      86,    35,    -1,    75,    -1,    63,    -1,    19,    93,    89,
      94,    31,    93,    75,    30,    -1,    82,    19,    93,    89,
      94,    31,    93,    75,    30,    -1,    20,    31,    93,    75,
      94,    30,    -1,    85,    -1,    86,    -1,    87,    -1,    88,
      -1,    88,    36,    84,    37,    -1,    34,    84,    35,    -1,
      89,    -1,    90,    -1,    91,    -1,    92,    -1,    84,    44,
      84,    -1,    84,    43,    84,    -1,    84,    46,    84,    -1,
      84,    45,    84,    -1,    84,    41,    84,    -1,    84,    42,
      84,    -1,    84,    25,    93,    84,    -1,    84,    27,    93,
      84,    -1,    84,    26,    93,    84,    -1,    84,    28,    93,
      84,    -1,    29,    84,    -1,    84,    47,    84,    -1,    84,
      48,    84,    -1,    84,    49,    84,    -1,    84,    50,    84,
      -1,    84,    51,    84,    -1,    48,    84,    -1,    52,    -1,
      53,    -1,    54,    -1,    55,    -1,    56,    -1,    -1,    -1
  };

  /* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
     YYRHS.  */
  private static final short yyprhs_[] =
  {
         0,     0,     3,    10,    16,    22,    27,    30,    32,    35,
      37,    39,    41,    43,    46,    48,    51,    55,    58,    63,
      67,    69,    74,    79,    83,    87,    91,    94,    96,   100,
     103,   107,   110,   114,   117,   119,   122,   130,   137,   141,
     144,   148,   151,   154,   158,   163,   165,   167,   177,   179,
     189,   195,   199,   206,   213,   222,   229,   235,   240,   244,
     247,   253,   255,   257,   266,   276,   283,   285,   287,   289,
     291,   296,   300,   302,   304,   306,   308,   312,   316,   320,
     324,   328,   332,   337,   342,   347,   352,   355,   359,   363,
     367,   371,   375,   378,   380,   382,   384,   386,   388,   389
  };

  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
  private static final short yyrline_[] =
  {
         0,   189,   189,   195,   201,   207,   215,   219,   225,   299,
     305,   311,   317,   325,   341,   351,   360,   375,   383,   396,
     411,   418,   434,   452,   493,   514,   546,   554,   564,   578,
     588,   602,   612,   626,   636,   640,   646,   650,   656,   660,
     666,   672,   681,   687,   693,   702,   706,   712,   721,   729,
     738,   748,   792,   844,   853,   885,   910,   936,   940,   944,
     948,   952,   958,   964,   974,   989,   998,  1011,  1020,  1028,
    1053,  1085,  1097,  1105,  1113,  1121,  1132,  1145,  1158,  1171,
    1184,  1197,  1210,  1220,  1230,  1251,  1272,  1283,  1295,  1307,
    1318,  1329,  1340,  1352,  1360,  1372,  1384,  1396,  1414,  1420
  };

  // Report on the debug stream that the rule yyrule is going to be reduced.
  private void yy_reduce_print (int yyrule, YYStack yystack)
  {
    if (yydebug == 0)
      return;

    int yylno = yyrline_[yyrule];
    int yynrhs = yyr2_[yyrule];
    /* Print the symbols being reduced, and their result.  */
    yycdebug ("Reducing stack by rule " + (yyrule - 1)
	      + " (line " + yylno + "), ");

    /* The symbols being reduced.  */
    for (int yyi = 0; yyi < yynrhs; yyi++)
      yy_symbol_print ("   $" + (yyi + 1) + " =",
		       yyrhs_[yyprhs_[yyrule] + yyi],
		       ((yystack.valueAt (yynrhs-(yyi + 1)))));
  }

  /* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
  private static final byte yytranslate_table_[] =
  {
         0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57
  };

  private static final byte yytranslate_ (int t)
  {
    if (t >= 0 && t <= yyuser_token_number_max_)
      return yytranslate_table_[t];
    else
      return yyundef_token_;
  }

  private static final int yylast_ = 366;
  private static final int yynnts_ = 37;
  private static final int yyempty_ = -2;
  private static final int yyfinal_ = 5;
  private static final int yyterror_ = 1;
  private static final int yyerrcode_ = 256;
  private static final int yyntokens_ = 58;

  private static final int yyuser_token_number_max_ = 312;
  private static final int yyundef_token_ = 2;

/* User implementation code.  */
/* Unqualified %code blocks.  */

/* Line 927 of lalr1.java  */
/* Line 24 of "SHLang.yac"  */


	public static final String TYPE_STRING_INTEGER = "int";
	public static final String TYPE_STRING_REAL = "double";
	public static final String TYPE_STRING_CHAR = "char";
	public static final String TYPE_STRING_BOOLEAN = "int";

	private static final String tempStr = "__SHLangTempVar";
	public static final String startStr = "__SHLangStartVar";
	public static final String sizeStr = "__SHLangSizeVar";
	public static final String indexStr = "__SHLangIndexVar";
	public static final String condStr = "__SHLangConditionVar";
	
	public static String lexIdentifier;
	public static int lexInt;
	public static double lexReal;
	public static boolean lexBoolean;
	public static char lexChar;

	private ArrayList<Quadruple> quadruples = new ArrayList<>();
	private SymbolTable symbolTable = new SymbolTable();
	public static PrintStream writer;

	private int tempCounter = 0;

	public String fileAddress;

	public static void main(String args[]) throws IOException {
		YYParser yyparser;
		final Yylex lexer;

		writer = new PrintStream(new File("output.txt"));
		lexer = new Yylex(new InputStreamReader(new FileInputStream(".\\files\\Code.shl")));

		yyparser = new YYParser(new Lexer() {

			@Override
			public int yylex() {
				int yyl_return = -1;
				try {
					yyl_return = lexer.yylex();
				} catch (IOException e) {
					System.err.println("IO error: " + e);
				}
				return yyl_return;
			}

			@Override
			public void yyerror(String error) {
				System.err.println("Error! " + error);
			}

			@Override
			public Object getLVal() {
				return null;
			}
		});
		yyparser.fileAddress = "E:\\Dev C++\\TEMP - Programs\\compiler.c";
		yyparser.parse();

		return;
	}

	private void emit(String operation, String arg0, String arg1, String result) {
		quadruples.add(new Quadruple(operation, arg0, arg1, result));
	}

	private void backpatch(ArrayList<Integer> list, int quadNumber) {
		for (int i = 0; i < list.size(); i++)
			quadruples.get(list.get(i)).result = String.valueOf(quadNumber);
	}

	private void backpatch(int quadNumber, int destination) {
		quadruples.get(quadNumber).result = String.valueOf(destination);
	}

	private String newTemp(int type, boolean array) {
		String name = tempStr + tempCounter++;
		symbolTable.addToSymbolTable(name, type, array);
		return name;
	}

	private int nextQuad() {
		return quadruples.size();
	}

	private String getTypeString(int typeCode){
		switch(typeCode){
			case EVal.TYPE_CODE_INTEGER:
				return TYPE_STRING_INTEGER;
			case EVal.TYPE_CODE_REAL:
				return TYPE_STRING_REAL;
			case EVal.TYPE_CODE_CHAR:
				return TYPE_STRING_CHAR;
			case EVal.TYPE_CODE_BOOLEAN:
				return TYPE_STRING_BOOLEAN;
			case EVal.TYPE_CODE_UNKNOWN:
			case EVal.TYPE_CODE_RANGE:
			default:
				return null;
		}
	}

	private void exportIntermediateCode() {
		DataOutputStream dos = null;
		try {
			dos = new DataOutputStream(new FileOutputStream(fileAddress));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

		try {
			dos.writeBytes("#include <stdio.h>\n\nint main() {\n\t// ////////////////// Symbol Table \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ \\\\\n\n");
			dos.writeBytes(symbolTable.toString());
			dos.writeBytes("\n\t// ////////////////// Quadruples \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ \\\\\n\n");
			// Backpatch of error controllers.
			backpatch(EVal.arrayIndexOutOfBoundList, (quadruples.size() + 1)); // Array index out of bound error.
			backpatch(EVal.invalidArraySizeList, (quadruples.size() + 2)); // Invalid array size error.
			for (int i = 0; i < quadruples.size() && i < 100; i++) {
				dos.writeBytes(Quadruple.LINE_STR + i + ":" + "\t\t" + quadruples.get(i) + "\n");
			}
			for (int i = 100; i < quadruples.size(); i++) {
				dos.writeBytes(Quadruple.LINE_STR + i + ":" + "\t\t" + quadruples.get(i) + "\n");
			}
			// Normal Finish
			if(quadruples.size() < 100)
				dos.writeBytes(Quadruple.LINE_STR + quadruples.size() + ":" + "\t\tprintf(\"Process is terminated with no error.\\n\");\n" +
					"\t\t\t\tgetchar();\n\t\t\t\treturn 0;\n");
			else
				dos.writeBytes(Quadruple.LINE_STR + quadruples.size() + ":" + "\t\tprintf(\"Process is terminated with no error.\\n\");\n" +
					"\t\t\t\tgetchar();\n\t\t\t\treturn 0;\n");

			// Array index out of bound error.
			if(quadruples.size() < 100)
				dos.writeBytes(Quadruple.LINE_STR + (quadruples.size() + 1) + ":" + "\t\tprintf(\"Array Error: Index out of bound!\\n\");\n" +
					"\t\t\t\tgetchar();\n\t\t\treturn -1;\n");
			else
				dos.writeBytes(Quadruple.LINE_STR + (quadruples.size() + 1) + ":" + "\t\tprintf(\"Array Error: Index out of bound!\\n\");\n" +
					"\t\t\t\tgetchar();\n\t\t\treturn -1;\n");

			// Invalid array size error.
			if(quadruples.size() < 100)
				dos.writeBytes(Quadruple.LINE_STR + (quadruples.size() + 2) + ":" + "\t\tprintf(\"Array Error: Invalid array size!\\n\");\n" +
					"\t\t\t\tgetchar();\n\t\t\treturn -2;\n");
			else
				dos.writeBytes(Quadruple.LINE_STR + (quadruples.size() + 2) + ":" + "\t\tprintf(\"Array Error: Invalid array size!\\n\");\n" +
					"\t\t\t\tgetchar();\n\t\t\treturn -2;\n");

			dos.writeBytes("}");
		} catch (IOException e) {
			e.printStackTrace();
		}

	}



/* Line 927 of lalr1.java  */
/* Line 3330 of "SHLang.cac"  */

}


/* Line 931 of lalr1.java  */
/* Line 1426 of "SHLang.yac"  */

// Classes
// // EVal
class EVal {

	public static final int TYPE_CODE_UNKNOWN = -1;
	public static final int TYPE_CODE_INTEGER = 0;
	public static final int TYPE_CODE_REAL = 1;
	public static final int TYPE_CODE_CHAR = 2;
	public static final int TYPE_CODE_BOOLEAN = 3;
	public static final int TYPE_CODE_RANGE = 4;
	

	public String place;
	public int type;
	public boolean array;

	public int quad;

	public static ArrayList<Integer> arrayIndexOutOfBoundList = new ArrayList<>();
	public static ArrayList<Integer> invalidArraySizeList = new ArrayList<>();
	public ArrayList<Integer> initList;
	public ArrayList<Integer> nextList;
	public ArrayList<Integer> trueList;
	public ArrayList<Integer> falseList;

	public ArrayList<ArrayList<EVal>> initializersList;
	public ArrayList<EVal> declareds;

	public ArrayList<EVal> initializers;

	public EVal() {
	}

	public static ArrayList<Integer> makeList(int number) {
		ArrayList<Integer> result = new ArrayList<>();
		result.add(number);
		return result;
	}

	public static ArrayList<Integer> merge(ArrayList<Integer> al1, ArrayList<Integer> al2) {
		ArrayList<Integer> result = new ArrayList<>();
		result.addAll(al1);
		result.addAll(al2);
		return result;
	}

	public static ArrayList<ArrayList<EVal>> makeInitializersList(ArrayList<EVal> initializers) {
		ArrayList<ArrayList<EVal>> result = new ArrayList<>();
		result.add(initializers);
		return result;
	}

	public static ArrayList<EVal> makeInitializersOrDeclareds(EVal initializerOrdDeclared) {
		ArrayList<EVal> result = new ArrayList<>();
		result.add(initializerOrdDeclared);
		return result;
	}
}

// // Quadruple
/*  ______________________________________________________________________________
 * |                                                                              |
 * |                                  Quadruples                                  |
 * |______________________________________________________________________________|
 * |              Statement             | Operation |    Arg0   |  Arg1 |  Result |
 * |____________________________________|___________|___________|_______|_________|
 * |               goto L               |    goto   |           |       |    L    |
 * |       if BOOLEAN then goto L       |   check   |  BOOLEAN  |       |    L    |
 * |    if BOOLEAN[INDEX] then goto L   |  checkarr |  BOOLEAN  | INDEX |    L    |
 * |             E = E1 < E2            |     <     |     E1    |   E2  |    E    |
 * |            E = E1 <= E2            |     <=    |     E1    |   E2  |    E    |
 * |             E = E1 > E2            |     >     |     E1    |   E2  |    E    |
 * |            E = E1 >= E2            |     >=    |     E1    |   E2  |    E    |
 * |            E = E1 == E2            |     =     |     E1    |   E2  |    E    |
 * |            E = E1 <> E2            |     <>    |     E1    |   E2  |    E    |
 * |             E = E1 + E2            |     +     |     E1    |   E2  |    E    |
 * |             E = E1 - E2            |     -     |     E1    |   E2  |    E    |
 * |             E = E1 * E2            |     *     |     E1    |   E2  |    E    |
 * |             E = E1 / E2            |     /     |     E1    |   E2  |    E    |
 * |             E = E1 % E2            |     %     |     E1    |   E2  |    E    |
 * |               E = -E1              |    usub   |     E1    |       |    E    |
 * |               E = E1               |     :=    |     E1    |       |    E    |
 * |               TYPE E               |    init   |    TYPE   |       |    E    |
 * |         printf("E = E.val")        |   iprint  |           |       |   int   |
 * |         printf("E = E.val")        |   rprint  |           |       |   real  |
 * |         printf("E = E.val")        |   cprint  |           |       |   char  |
 * |         printf("E = E.val")        |   bprint  |           |       | boolean |
 * |  printf("E[PLACE] = E[INDEX].val") |  aiprint  |   PLACE   | INDEX |   int   |
 * |  printf("E[PLACE] = E[INDEX].val") |  arprint  |   PLACE   | INDEX |   real  |
 * |  printf("E[PLACE] = E[INDEX].val") |  acprint  |   PLACE   | INDEX |   char  |
 * |  printf("E[PLACE] = E[INDEX].val") |  abprint  |   PLACE   | INDEX | boolean |
 * | NAME = malloc(sizeOf(TYPE) * SIZE) |   malloc  |    TYPE   |  SIZE |   NAME  |
 * |            E[INDEX] = E1           |    []=    |     E1    | INDEX |    E    |
 * |            E = E1[INDEX]           |    =[]    |     E1    | INDEX |    E    |
 * |____________________________________|___________|___________|_______|_________|
 */
class Quadruple {

	public static final String LINE_STR = "Line";

	public String operation;
	public String arg0;
	public String arg1;
	public String result;

	public Quadruple(String operation, String arg0, String arg1, String result) {
		this.operation = operation;
		this.arg0 = arg0;
		this.arg1 = arg1;
		this.result = result;
	}

	@Override
	public String toString() {
		switch(operation.toLowerCase()){
			case "goto":
				return operation + " " + LINE_STR + result + ";";
			case "check":
				return "if (" + arg0 + ") goto " + LINE_STR + result + ";";
			case "checkarr":
				return "if (" + arg0 + "[" + arg1 + "]) goto " + LINE_STR + result + ";";
			case "<":
			case "<=":
			case ">":
			case ">=":
			case "<>":
			case "+":
			case "-":
			case "*":
			case "/":
			case "%":
				return result + " = " + arg0 + " " + operation + " " + arg1 + ";";
			case "=":
				return result + " = " + arg0 + " " + "==" + " " + arg1 + ";";
			case "usub":
				return result + " = -" + arg0 + ";";
			case ":=":
				return result + " = " + arg0 + ";";
			case "init":
				return arg1 + " " + result + ";";
			case "iprint":
				return "printf(\"%s = %d\\n\", \"" + result + "\", " + result + ");";
			case "rprint":
				return "printf(\"%s = %f\\n\", \"" + result + "\", " + result + ");";
			case "cprint":
				return "printf(\"%s = '%c'\\n\", \"" + result + "\", " + result + ");";
			case "bprint":
				return "printf(\"%s = %s\\n\", \"" + result + "\", " + result + " ? \"true\" : \"false\");";
			case "aiprint":
				return "printf(\"%s[%d] = %d\\n\", \"" + result + "\", " + arg0 + ", " + result + "[" + arg1 + "]);";
			case "arprint":
				return "printf(\"%s[%d] = %f\\n\", \"" + result + "\", " + arg0 + ", " + result + "[" + arg1 + "]);";
			case "acprint":
				return "printf(\"%s[%d] = '%c'\\n\", \"" + result + "\", " + arg0 + ", " + result + "[" + arg1 + "]);";
			case "abprint":
				return "printf(\"%s[%d] = %s\\n\", \"" + result + "\", " + arg0 + ", " + result + "[" + arg1 + "] ? \"true\" : \"false\");";
			case "[]=":
				return result + "[" + arg1 + "] = " + arg0 + ";";
			case "=[]":
				return result + " = " + arg0 + "[" + arg1 + "];";
			case "malloc":
				return result + " = " + "malloc(sizeof(" + arg0 + ") * " + arg1+ ");";
			default:
				return null;
		}
	}
}

// Symbol Table
class SymbolTable {

	public static final int NOT_IN_SYMBOL_TABLE = -1;

	public ArrayList<String> names;
	public ArrayList<Integer> types;
	public ArrayList<Boolean> arrays;

	public SymbolTable() {
		names = new ArrayList<>();
		types = new ArrayList<>();
		arrays = new ArrayList<>();
	}

	public int lookUp(String name) {
		return names.indexOf(name);
	}

	public boolean addToSymbolTable(String name, int type, boolean array) {
		if (lookUp(name) == -1) {
			names.add(name);
			types.add(type);
			arrays.add(array);
			return true;
		}
		return false;
	}

	@Override
    public String toString() {
        if(names.size() == 0)
            return null;
        String res = "";
        for(int i = 0; i < names.size(); i++) {
            switch (types.get(i)) {
                case EVal.TYPE_CODE_INTEGER:
                    res += "\t" + YYParser.TYPE_STRING_INTEGER;
                    break;
                case EVal.TYPE_CODE_REAL:
                    res += "\t" + YYParser.TYPE_STRING_REAL;
                    break;
                case EVal.TYPE_CODE_CHAR:
                    res += "\t" + YYParser.TYPE_STRING_CHAR;
                    break;
                case EVal.TYPE_CODE_BOOLEAN:
                    res += "\t" + YYParser.TYPE_STRING_BOOLEAN;
                    break;
                case EVal.TYPE_CODE_RANGE:
                    continue;
            }
            res += (arrays.get(i) ? " *" : " ") + names.get(i) + ";\n";
        }
        return res;
	}

}
